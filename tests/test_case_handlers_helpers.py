"""
–¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫–µ–π—Å–æ–≤.

–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –º–æ–¥—É–ª–∏:
- app/cases/career_dialog/handler.py
- app/cases/fb_peer/handler.py
- app/cases/fb_employee/handler.py

–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- format_career_response / format_provd_response
- parse_reviewer_response
- format_review_response
- extract_dialogue_text
"""

import pytest
import json

from app.cases.career_dialog.handler import (
    format_career_response,
    parse_reviewer_response as parse_reviewer_career,
    format_review_response as format_review_career,
    extract_dialogue_text as extract_dialogue_career,
)
from app.cases.fb_peer.handler import (
    format_provd_response as format_provd_peer,
    parse_reviewer_response as parse_reviewer_peer,
    format_review_response as format_review_peer,
    extract_dialogue_text as extract_dialogue_peer,
)
from app.cases.fb_employee.handler import (
    format_provd_response as format_provd_employee,
    parse_reviewer_response as parse_reviewer_employee,
    format_review_response as format_review_employee,
    extract_dialogue_text as extract_dialogue_employee,
)


class TestFormatCareerResponse:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ format_career_response (career_dialog)"""

    def test_format_without_analysis(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
        parsed = {
            "ReplyText": "–î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —Ç–≤–æ–∏ —Ü–µ–ª–∏",
            "Aspirations": True,
            "Strengths": False
        }
        
        result = format_career_response(parsed, show_analysis=False)
        
        assert "üë®‚Äçüíª *–ú–∞–∫—Å–∏–º:* –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —Ç–≤–æ–∏ —Ü–µ–ª–∏" in result
        assert "–ê–Ω–∞–ª–∏–∑" not in result
        assert "‚úÖ" not in result
        assert "‚ùå" not in result

    def test_format_with_analysis(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        parsed = {
            "ReplyText": "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ",
            "Aspirations": True,
            "Strengths": True,
            "Development": False,
            "Opportunities": False,
            "Plan": False
        }
        
        result = format_career_response(parsed, show_analysis=True)
        
        assert "üë®‚Äçüíª *–ú–∞–∫—Å–∏–º:* –•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ" in result
        assert "üìä *–ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞:*" in result
        assert "‚úÖ üéØ –£—Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è" in result
        assert "‚úÖ üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã" in result
        assert "‚ùå üìà –†–∞–∑–≤–∏—Ç–∏–µ" in result

    def test_format_empty_reply(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º"""
        parsed = {
            "ReplyText": "",
            "Aspirations": False
        }
        
        result = format_career_response(parsed, show_analysis=False)
        
        assert "üë®‚Äçüíª *–ú–∞–∫—Å–∏–º:*" in result

    def test_format_all_components_achieved(self):
        """–¢–µ—Å—Ç: –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã"""
        parsed = {
            "ReplyText": "–û—Ç–ª–∏—á–Ω—ã–π –ø–ª–∞–Ω!",
            "Aspirations": True,
            "Strengths": True,
            "Development": True,
            "Opportunities": True,
            "Plan": True
        }
        
        result = format_career_response(parsed, show_analysis=True)
        
        # –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ
        assert result.count("‚úÖ") == 5
        assert result.count("‚ùå") == 0


class TestFormatProvdResponse:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ format_provd_response (fb_peer –∏ fb_employee)"""

    def test_format_peer_without_analysis(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫–æ–ª–ª–µ–≥–∏ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        parsed = {
            "ReplyText": "–î–∞, –ø–æ–Ω–∏–º–∞—é. –ë—É–¥—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ.",
            "Behavior": True,
            "Result": False
        }
        
        result = format_provd_peer(parsed, show_analysis=False)
        
        assert "üë• *–ê–ª–µ–∫—Å–∞–Ω–¥—Ä:* –î–∞, –ø–æ–Ω–∏–º–∞—é. –ë—É–¥—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ." in result
        assert "–ê–Ω–∞–ª–∏–∑" not in result

    def test_format_peer_with_analysis(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫–æ–ª–ª–µ–≥–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º"""
        parsed = {
            "ReplyText": "–•–æ—Ä–æ—à–æ, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å",
            "Behavior": True,
            "Result": True,
            "Emotion": False,
            "Question": False,
            "Agreement": True
        }
        
        result = format_provd_peer(parsed, show_analysis=True)
        
        assert "üë• *–ê–ª–µ–∫—Å–∞–Ω–¥—Ä:* –•–æ—Ä–æ—à–æ, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å" in result
        assert "üìä *–ê–Ω–∞–ª–∏–∑ –ü–†–û–í–î:*" in result
        assert "‚úÖ –ü - –ü–æ–≤–µ–¥–µ–Ω–∏–µ" in result
        assert "‚úÖ –† - –†–µ–∑—É–ª—å—Ç–∞—Ç" in result
        assert "‚ùå –û - –û—Ç–Ω–æ—à–µ–Ω–∏–µ" in result
        assert "‚úÖ –î - –î–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏" in result

    def test_format_employee_without_analysis(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        parsed = {
            "ReplyText": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å",
            "Emotion": True
        }
        
        result = format_provd_employee(parsed, show_analysis=False)
        
        assert "üí¨ *–ï–≤–≥–µ–Ω–∏–π:* –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å" in result

    def test_format_employee_with_analysis(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º"""
        parsed = {
            "ReplyText": "–ü–æ–Ω—è–ª, –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º",
            "Behavior": False,
            "Result": False,
            "Emotion": True,
            "Question": False,
            "Agreement": True
        }
        
        result = format_provd_employee(parsed, show_analysis=True)
        
        assert "üí¨ *–ï–≤–≥–µ–Ω–∏–π:* –ü–æ–Ω—è–ª, –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º" in result
        assert "üìä *–ê–Ω–∞–ª–∏–∑ –ü–†–û–í–î:*" in result
        assert "‚ùå –ü - –ü–æ–≤–µ–¥–µ–Ω–∏–µ" in result
        assert "‚úÖ –û - –û—Ç–Ω–æ—à–µ–Ω–∏–µ" in result


class TestParseReviewerResponse:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ parse_reviewer_response"""

    ALL_PARSERS = [
        pytest.param(parse_reviewer_career, id="career_dialog"),
        pytest.param(parse_reviewer_peer, id="fb_peer"),
        pytest.param(parse_reviewer_employee, id="fb_employee"),
    ]

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_valid_json(self, parser):
        """–¢–µ—Å—Ç: –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON –æ—Ç–≤–µ—Ç–∞ —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞"""
        response = json.dumps({
            "overall": "–•–æ—Ä–æ—à–∏–π –¥–∏–∞–ª–æ–≥",
            "goodPoints": ["–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã", "–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"],
            "improvementPoints": ["–ë–æ–ª—å—à–µ —ç–º–ø–∞—Ç–∏–∏"]
        })
        
        result = parser(response)
        
        assert result["overall"] == "–•–æ—Ä–æ—à–∏–π –¥–∏–∞–ª–æ–≥"
        assert len(result["goodPoints"]) == 2
        assert len(result["improvementPoints"]) == 1

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_with_text_around(self, parser):
        """–¢–µ—Å—Ç: JSON —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–∫—Ä—É–≥"""
        response = "–í–æ—Ç –º–æ–π –∞–Ω–∞–ª–∏–∑: " + json.dumps({
            "overall": "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            "goodPoints": ["–≠–º–ø–∞—Ç–∏—è"],
            "improvementPoints": []
        }) + " –ö–æ–Ω–µ—Ü –∞–Ω–∞–ª–∏–∑–∞."
        
        result = parser(response)
        
        assert result["overall"] == "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
        assert result["goodPoints"] == ["–≠–º–ø–∞—Ç–∏—è"]
        assert result["improvementPoints"] == []

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_empty_arrays(self, parser):
        """–¢–µ—Å—Ç: –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –≤ JSON"""
        response = json.dumps({
            "overall": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "goodPoints": [],
            "improvementPoints": []
        })
        
        result = parser(response)
        
        assert result["overall"] == "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        assert result["goodPoints"] == []
        assert result["improvementPoints"] == []

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_malformed_json(self, parser):
        """–¢–µ—Å—Ç: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON (fallback)"""
        response = '{"overall": "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π JSON'
        
        result = parser(response)
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ overall
        assert result["overall"] == response
        assert result["goodPoints"] == []
        assert result["improvementPoints"] == []

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_plain_text(self, parser):
        """–¢–µ—Å—Ç: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ JSON (fallback)"""
        response = "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
        
        result = parser(response)
        
        assert result["overall"] == response
        assert result["goodPoints"] == []
        assert result["improvementPoints"] == []

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_without_overall(self, parser):
        """–¢–µ—Å—Ç: JSON –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è overall (fallback)"""
        response = json.dumps({
            "goodPoints": ["–ß—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ"],
            "improvementPoints": ["–ß—Ç–æ-—Ç–æ –ø–ª–æ—Ö–æ–µ"]
        })
        
        result = parser(response)
        
        # –ë–µ–∑ overall ‚Äî –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å fallback
        assert result["overall"] == response

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_long_review(self, parser):
        """–¢–µ—Å—Ç: –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø—É–Ω–∫—Ç–æ–≤"""
        good_points = [f"–•–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç {i}" for i in range(10)]
        improvement_points = [f"–£–ª—É—á—à–µ–Ω–∏–µ {i}" for i in range(5)]
        
        response = json.dumps({
            "overall": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "goodPoints": good_points,
            "improvementPoints": improvement_points
        })
        
        result = parser(response)
        
        assert len(result["goodPoints"]) == 10
        assert len(result["improvementPoints"]) == 5


class TestFormatReviewResponse:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ format_review_response"""

    ALL_FORMATTERS = [
        pytest.param(format_review_career, id="career_dialog"),
        pytest.param(format_review_peer, id="fb_peer"),
        pytest.param(format_review_employee, id="fb_employee"),
    ]

    @pytest.mark.parametrize("formatter", ALL_FORMATTERS)
    def test_format_full_review(self, formatter):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
        parsed = {
            "overall": "–•–æ—Ä–æ—à–∏–π –¥–∏–∞–ª–æ–≥ –≤ —Ü–µ–ª–æ–º",
            "goodPoints": ["–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞", "–≠–º–ø–∞—Ç–∏—è"],
            "improvementPoints": ["–ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤"]
        }
        
        result = formatter(parsed)
        
        assert "–•–æ—Ä–æ—à–∏–π –¥–∏–∞–ª–æ–≥ –≤ —Ü–µ–ª–æ–º" in result
        assert "1. –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞" in result
        assert "2. –≠–º–ø–∞—Ç–∏—è" in result
        assert "1. –ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤" in result

    @pytest.mark.parametrize("formatter", ALL_FORMATTERS)
    def test_format_only_overall(self, formatter):
        """–¢–µ—Å—Ç: —Ç–æ–ª—å–∫–æ –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞, –±–µ–∑ —Å–ø–∏—Å–∫–æ–≤"""
        parsed = {
            "overall": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "goodPoints": [],
            "improvementPoints": []
        }
        
        result = formatter(parsed)
        
        assert "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" in result
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã
        assert "–ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ" not in result or result.count("–ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ") == 0

    @pytest.mark.parametrize("formatter", ALL_FORMATTERS)
    def test_format_only_good_points(self, formatter):
        """–¢–µ—Å—Ç: —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã"""
        parsed = {
            "overall": "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
            "goodPoints": ["–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ", "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ"],
            "improvementPoints": []
        }
        
        result = formatter(parsed)
        
        assert "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!" in result
        assert "–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ" in result
        assert "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ" in result

    @pytest.mark.parametrize("formatter", ALL_FORMATTERS)
    def test_format_only_improvement_points(self, formatter):
        """–¢–µ—Å—Ç: —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è"""
        parsed = {
            "overall": "–ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å",
            "goodPoints": [],
            "improvementPoints": ["–ë–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏", "–°–ª—É—à–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ"]
        }
        
        result = formatter(parsed)
        
        assert "–ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å" in result
        assert "–ë–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏" in result
        assert "–°–ª—É—à–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ" in result

    @pytest.mark.parametrize("formatter", ALL_FORMATTERS)
    def test_format_numbered_lists(self, formatter):
        """–¢–µ—Å—Ç: –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤"""
        parsed = {
            "overall": "–ê–Ω–∞–ª–∏–∑",
            "goodPoints": ["–ü–µ—Ä–≤–æ–µ", "–í—Ç–æ—Ä–æ–µ", "–¢—Ä–µ—Ç—å–µ"],
            "improvementPoints": ["–†–∞–∑", "–î–≤–∞"]
        }
        
        result = formatter(parsed)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
        assert "1. –ü–µ—Ä–≤–æ–µ" in result
        assert "2. –í—Ç–æ—Ä–æ–µ" in result
        assert "3. –¢—Ä–µ—Ç—å–µ" in result
        assert "1. –†–∞–∑" in result
        assert "2. –î–≤–∞" in result


class TestExtractDialogueText:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ extract_dialogue_text"""

    ALL_EXTRACTORS = [
        pytest.param(extract_dialogue_career, id="career_dialog"),
        pytest.param(extract_dialogue_peer, id="fb_peer"),
        pytest.param(extract_dialogue_employee, id="fb_employee"),
    ]

    @pytest.mark.parametrize("extractor", ALL_EXTRACTORS)
    def test_extract_simple_dialogue(self, extractor):
        """–¢–µ—Å—Ç: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        entries = [
            {"role": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "text": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"},
            {"role": "–ú–∞–∫—Å–∏–º", "text": "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ."},
            {"role": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "text": "–î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —Ç–≤–æ–∏ —Ü–µ–ª–∏."},
        ]
        
        result = extractor(entries)
        
        assert "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?" in result
        assert "–ú–∞–∫—Å–∏–º: –•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ." in result
        assert "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —Ç–≤–æ–∏ —Ü–µ–ª–∏." in result
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –º–µ–∂–¥—É —Ä–µ–ø–ª–∏–∫–∞–º–∏
        assert "\n\n" in result

    @pytest.mark.parametrize("extractor", ALL_EXTRACTORS)
    def test_extract_empty_dialogue(self, extractor):
        """–¢–µ—Å—Ç: –ø—É—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥"""
        entries = []
        
        result = extractor(entries)
        
        assert result == ""

    @pytest.mark.parametrize("extractor", ALL_EXTRACTORS)
    def test_extract_dialogue_with_empty_entries(self, extractor):
        """–¢–µ—Å—Ç: –¥–∏–∞–ª–æ–≥ —Å –ø—É—Å—Ç—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏"""
        entries = [
            {"role": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "text": "–ü–µ—Ä–≤–∞—è —Ä–µ–ø–ª–∏–∫–∞"},
            {"role": "", "text": "–ù–µ—Ç —Ä–æ–ª–∏"},
            {"role": "–ú–∞–∫—Å–∏–º", "text": ""},
            {"role": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "text": "–í—Ç–æ—Ä–∞—è —Ä–µ–ø–ª–∏–∫–∞"},
        ]
        
        result = extractor(entries)
        
        # –ó–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç–æ–π —Ä–æ–ª—å—é –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        assert "–ü–µ—Ä–≤–∞—è —Ä–µ–ø–ª–∏–∫–∞" in result
        assert "–í—Ç–æ—Ä–∞—è —Ä–µ–ø–ª–∏–∫–∞" in result
        assert "–ù–µ—Ç —Ä–æ–ª–∏" not in result

    @pytest.mark.parametrize("extractor", ALL_EXTRACTORS)
    def test_extract_dialogue_with_special_characters(self, extractor):
        """–¢–µ—Å—Ç: –¥–∏–∞–ª–æ–≥ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏"""
        entries = [
            {"role": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "text": "–¢–µ–∫—Å—Ç —Å \"–∫–∞–≤—ã—á–∫–∞–º–∏\" –∏ \n–ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏"},
            {"role": "–ú–∞–∫—Å–∏–º", "text": "–û—Ç–≤–µ—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏: !@#$%"},
        ]
        
        result = extractor(entries)
        
        assert "–∫–∞–≤—ã—á–∫–∞–º–∏" in result
        assert "–ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏" in result
        assert "!@#$%" in result

    @pytest.mark.parametrize("extractor", ALL_EXTRACTORS)
    def test_extract_long_dialogue(self, extractor):
        """–¢–µ—Å—Ç: –¥–ª–∏–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
        entries = []
        for i in range(20):
            role = "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" if i % 2 == 0 else "–ú–∞–∫—Å–∏–º"
            entries.append({"role": role, "text": f"–†–µ–ø–ª–∏–∫–∞ –Ω–æ–º–µ—Ä {i}"})
        
        result = extractor(entries)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–µ–ø–ª–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        assert "–†–µ–ø–ª–∏–∫–∞ –Ω–æ–º–µ—Ä 0" in result
        assert "–†–µ–ø–ª–∏–∫–∞ –Ω–æ–º–µ—Ä 19" in result
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ 1 –º–µ–Ω—å—à–µ —á–µ–º –∑–∞–ø–∏—Å–µ–π)
        assert result.count("\n\n") == 19

    @pytest.mark.parametrize("extractor", ALL_EXTRACTORS)
    def test_extract_dialogue_preserves_order(self, extractor):
        """–¢–µ—Å—Ç: –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–ø–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è"""
        entries = [
            {"role": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "text": "–ü–µ—Ä–≤–æ–µ"},
            {"role": "–ú–∞–∫—Å–∏–º", "text": "–í—Ç–æ—Ä–æ–µ"},
            {"role": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "text": "–¢—Ä–µ—Ç—å–µ"},
        ]
        
        result = extractor(entries)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã
        idx_first = result.find("–ü–µ—Ä–≤–æ–µ")
        idx_second = result.find("–í—Ç–æ—Ä–æ–µ")
        idx_third = result.find("–¢—Ä–µ—Ç—å–µ")
        
        assert idx_first < idx_second < idx_third


class TestEdgeCases:
    """–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""

    def test_format_career_with_missing_keys(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏"""
        parsed = {"ReplyText": "–û—Ç–≤–µ—Ç"}
        
        result = format_career_response(parsed, show_analysis=True)
        
        # –î–æ–ª–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–ª–∞–≥–∏
        assert "–û—Ç–≤–µ—Ç" in result

    def test_format_provd_with_none_values(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        parsed = {
            "ReplyText": "–¢–µ–∫—Å—Ç",
            "Behavior": None,
            "Result": None
        }
        
        result = format_provd_peer(parsed, show_analysis=True)
        
        assert "–¢–µ–∫—Å—Ç" in result

    def test_parse_reviewer_with_nested_structures(self):
        """–¢–µ—Å—Ç: –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏"""
        response = json.dumps({
            "overall": "–ê–Ω–∞–ª–∏–∑",
            "goodPoints": [
                "–ü—Ä–æ—Å—Ç–æ–π –ø—É–Ω–∫—Ç",
                {"nested": "–í–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"}  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
            ],
            "improvementPoints": []
        })
        
        result = parse_reviewer_career(response)
        
        # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert result["overall"] == "–ê–Ω–∞–ª–∏–∑"

    def test_extract_dialogue_with_missing_keys(self):
        """–¢–µ—Å—Ç: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏"""
        entries = [
            {"role": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"},  # –ù–µ—Ç text
            {"text": "–ù–µ—Ç —Ä–æ–ª–∏"},  # –ù–µ—Ç role
            {"role": "–ú–∞–∫—Å–∏–º", "text": "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å"},
        ]
        
        result = extract_dialogue_career(entries)
        
        # –¢–æ–ª—å–∫–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞
        assert "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å" in result
        assert result.count("\n\n") == 0  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å, –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π


class TestCyrillicAndUnicode:
    """–¢–µ—Å—Ç—ã —Ä–∞–±–æ—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏ Unicode"""

    def test_format_career_with_cyrillic(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"""
        parsed = {
            "ReplyText": "–û—Ç–ª–∏—á–Ω—ã–π –ø–ª–∞–Ω –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞!",
            "Aspirations": True
        }
        
        result = format_career_response(parsed, show_analysis=False)
        
        assert "–û—Ç–ª–∏—á–Ω—ã–π –ø–ª–∞–Ω –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞!" in result

    def test_format_provd_with_emoji(self):
        """–¢–µ—Å—Ç: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏"""
        parsed = {
            "ReplyText": "–•–æ—Ä–æ—à–æ! üëç –î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å ü§ù",
            "Agreement": True
        }
        
        result = format_provd_peer(parsed, show_analysis=False)
        
        assert "üëç" in result
        assert "ü§ù" in result

    def test_extract_dialogue_with_mixed_languages(self):
        """–¢–µ—Å—Ç: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏"""
        entries = [
            {"role": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "text": "Hello, –∫–∞–∫ –¥–µ–ª–∞? ‰Ω†Â•Ω"},
            {"role": "–ú–∞–∫—Å–∏–º", "text": "–•–æ—Ä–æ—à–æ, thanks! Ë∞¢Ë∞¢"},
        ]
        
        result = extract_dialogue_career(entries)
        
        assert "Hello, –∫–∞–∫ –¥–µ–ª–∞? ‰Ω†Â•Ω" in result
        assert "–•–æ—Ä–æ—à–æ, thanks! Ë∞¢Ë∞¢" in result

