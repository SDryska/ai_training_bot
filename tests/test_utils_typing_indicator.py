"""
–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–µ—á–∞—Ç–∞–Ω–∏—è.

–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å:
- app/utils/typing_indicator.py

–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- TypingIndicator –∫–ª–∞—Å—Å
- with_typing_indicator —Ñ—É–Ω–∫—Ü–∏—è
- with_listening_indicator —Ñ—É–Ω–∫—Ü–∏—è
- with_analysis_indicator —Ñ—É–Ω–∫—Ü–∏—è
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
import asyncio

from app.utils.typing_indicator import (
    TypingIndicator,
    with_typing_indicator,
    with_listening_indicator,
    with_analysis_indicator,
)


class TestTypingIndicatorInit:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TypingIndicator"""

    def test_init(self):
        """–¢–µ—Å—Ç: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞"""
        mock_bot = MagicMock()
        chat_id = 12345
        
        indicator = TypingIndicator(mock_bot, chat_id)
        
        assert indicator.bot == mock_bot
        assert indicator.chat_id == chat_id
        assert indicator.indicator_message is None


class TestTypingIndicatorShowCharacterTyping:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ show_character_typing"""

    @pytest.mark.asyncio
    async def test_show_character_typing_success(self):
        """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        
        indicator = TypingIndicator(mock_bot, 12345)
        
        await indicator.show_character_typing("TestCharacter", "üí¨")
        
        mock_bot.send_message.assert_called_once()
        call_kwargs = mock_bot.send_message.call_args.kwargs
        assert call_kwargs["chat_id"] == 12345
        assert "TestCharacter –¥—É–º–∞–µ—Ç" in call_kwargs["text"]
        assert call_kwargs["parse_mode"] == "Markdown"
        assert indicator.indicator_message == mock_message

    @pytest.mark.asyncio
    async def test_show_character_typing_default_emoji(self):
        """–¢–µ—Å—Ç: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å emoji –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        
        indicator = TypingIndicator(mock_bot, 12345)
        
        await indicator.show_character_typing("TestCharacter")
        
        call_kwargs = mock_bot.send_message.call_args.kwargs
        assert "üí¨" in call_kwargs["text"]

    @pytest.mark.asyncio
    async def test_show_character_typing_exception_handling(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        mock_bot = MagicMock()
        mock_bot.send_message = AsyncMock(side_effect=Exception("Send error"))
        
        indicator = TypingIndicator(mock_bot, 12345)
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        await indicator.show_character_typing("TestCharacter")
        
        assert indicator.indicator_message is None


class TestTypingIndicatorShowCharacterListening:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ show_character_listening"""

    @pytest.mark.asyncio
    async def test_show_character_listening_success(self):
        """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        
        indicator = TypingIndicator(mock_bot, 12345)
        
        await indicator.show_character_listening("TestCharacter", "üéß")
        
        mock_bot.send_message.assert_called_once()
        call_kwargs = mock_bot.send_message.call_args.kwargs
        assert call_kwargs["chat_id"] == 12345
        assert "TestCharacter —Å–ª—É—à–∞–µ—Ç" in call_kwargs["text"]
        assert call_kwargs["parse_mode"] == "Markdown"
        assert indicator.indicator_message == mock_message

    @pytest.mark.asyncio
    async def test_show_character_listening_default_emoji(self):
        """–¢–µ—Å—Ç: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å emoji –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        
        indicator = TypingIndicator(mock_bot, 12345)
        
        await indicator.show_character_listening("TestCharacter")
        
        call_kwargs = mock_bot.send_message.call_args.kwargs
        assert "üéß" in call_kwargs["text"]

    @pytest.mark.asyncio
    async def test_show_character_listening_exception_handling(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        mock_bot = MagicMock()
        mock_bot.send_message = AsyncMock(side_effect=Exception("Send error"))
        
        indicator = TypingIndicator(mock_bot, 12345)
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        await indicator.show_character_listening("TestCharacter")
        
        assert indicator.indicator_message is None


class TestTypingIndicatorShowAnalysisIndicator:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ show_analysis_indicator"""

    @pytest.mark.asyncio
    async def test_show_analysis_indicator_success(self):
        """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        
        indicator = TypingIndicator(mock_bot, 12345)
        
        await indicator.show_analysis_indicator()
        
        mock_bot.send_message.assert_called_once()
        call_kwargs = mock_bot.send_message.call_args.kwargs
        assert call_kwargs["chat_id"] == 12345
        assert "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∏–∞–ª–æ–≥" in call_kwargs["text"]
        assert call_kwargs["parse_mode"] == "Markdown"
        assert indicator.indicator_message == mock_message

    @pytest.mark.asyncio
    async def test_show_analysis_indicator_exception_handling(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        mock_bot = MagicMock()
        mock_bot.send_message = AsyncMock(side_effect=Exception("Send error"))
        
        indicator = TypingIndicator(mock_bot, 12345)
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        await indicator.show_analysis_indicator()
        
        assert indicator.indicator_message is None


class TestTypingIndicatorHideIndicator:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ hide_indicator"""

    @pytest.mark.asyncio
    async def test_hide_indicator_success(self):
        """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        mock_bot.delete_message = AsyncMock()
        
        indicator = TypingIndicator(mock_bot, 12345)
        indicator.indicator_message = mock_message
        
        await indicator.hide_indicator()
        
        mock_bot.delete_message.assert_called_once()
        call_kwargs = mock_bot.delete_message.call_args.kwargs
        assert call_kwargs["chat_id"] == 12345
        assert call_kwargs["message_id"] == 123
        assert indicator.indicator_message is None

    @pytest.mark.asyncio
    async def test_hide_indicator_no_message(self):
        """–¢–µ—Å—Ç: —Å–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç"""
        mock_bot = MagicMock()
        mock_bot.delete_message = AsyncMock()
        
        indicator = TypingIndicator(mock_bot, 12345)
        indicator.indicator_message = None
        
        await indicator.hide_indicator()
        
        mock_bot.delete_message.assert_not_called()

    @pytest.mark.asyncio
    async def test_hide_indicator_exception_handling(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.delete_message = AsyncMock(side_effect=Exception("Delete error"))
        
        indicator = TypingIndicator(mock_bot, 12345)
        indicator.indicator_message = mock_message
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        await indicator.hide_indicator()
        
        # –ü–æ—Å–ª–µ finally —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–∏—â–µ–Ω–æ
        assert indicator.indicator_message is None


class TestWithTypingIndicator:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ with_typing_indicator"""

    @pytest.mark.asyncio
    async def test_with_typing_indicator_shows_and_hides(self):
        """–¢–µ—Å—Ç: —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        mock_bot.delete_message = AsyncMock()
        
        async def async_operation():
            return "result"
        
        result = await with_typing_indicator(
            mock_bot, 12345, "TestCharacter", "üí¨", async_operation
        )
        
        assert result == "result"
        assert mock_bot.send_message.call_count == 1
        assert mock_bot.delete_message.call_count == 1

    @pytest.mark.asyncio
    async def test_with_typing_indicator_exception_in_operation(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        mock_bot.delete_message = AsyncMock()
        
        async def async_operation():
            raise Exception("Operation error")
        
        with pytest.raises(Exception):
            await with_typing_indicator(
                mock_bot, 12345, "TestCharacter", "üí¨", async_operation
            )
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫—Ä—ã—Ç –¥–∞–∂–µ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
        assert mock_bot.delete_message.call_count == 1


class TestWithListeningIndicator:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ with_listening_indicator"""

    @pytest.mark.asyncio
    async def test_with_listening_indicator_shows_and_hides(self):
        """–¢–µ—Å—Ç: —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        mock_bot.delete_message = AsyncMock()
        
        async def async_operation():
            return "result"
        
        result = await with_listening_indicator(
            mock_bot, 12345, "TestCharacter", "üéß", async_operation
        )
        
        assert result == "result"
        assert mock_bot.send_message.call_count == 1
        assert mock_bot.delete_message.call_count == 1

    @pytest.mark.asyncio
    async def test_with_listening_indicator_calls_listening_method(self):
        """–¢–µ—Å—Ç: —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        mock_bot.delete_message = AsyncMock()
        
        async def async_operation():
            return "result"
        
        await with_listening_indicator(
            mock_bot, 12345, "TestCharacter", "üéß", async_operation
        )
        
        call_kwargs = mock_bot.send_message.call_args.kwargs
        assert "—Å–ª—É—à–∞–µ—Ç" in call_kwargs["text"]


class TestWithAnalysisIndicator:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ with_analysis_indicator"""

    @pytest.mark.asyncio
    async def test_with_analysis_indicator_shows_and_hides(self):
        """–¢–µ—Å—Ç: —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        mock_bot.delete_message = AsyncMock()
        
        async def async_operation():
            return "result"
        
        result = await with_analysis_indicator(
            mock_bot, 12345, async_operation
        )
        
        assert result == "result"
        assert mock_bot.send_message.call_count == 1
        assert mock_bot.delete_message.call_count == 1

    @pytest.mark.asyncio
    async def test_with_analysis_indicator_shows_analysis_text(self):
        """–¢–µ—Å—Ç: —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        mock_bot = MagicMock()
        mock_message = MagicMock()
        mock_message.message_id = 123
        mock_bot.send_message = AsyncMock(return_value=mock_message)
        mock_bot.delete_message = AsyncMock()
        
        async def async_operation():
            return "result"
        
        await with_analysis_indicator(mock_bot, 12345, async_operation)
        
        call_kwargs = mock_bot.send_message.call_args.kwargs
        assert "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∏–∞–ª–æ–≥" in call_kwargs["text"]

