"""–¢–µ—Å—Ç—ã –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""

import pytest
from unittest.mock import Mock

from app.config.settings import Settings
from app.services.validation_service import InputValidator, ValidationError, validator as global_validator


class TestInputValidatorInit:
    """–¢–µ—Å—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""

    def test_validator_init_with_default_settings(self):
        """–¢–µ—Å—Ç: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        validator = InputValidator()
        assert validator.settings is not None

    def test_validator_init_with_custom_settings(self):
        """–¢–µ—Å—Ç: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        custom_settings = Settings(
            BOT_TOKEN="test_token",
            TEXT_MAX_LENGTH=1000,
            TEXT_MIN_LENGTH=5,
            VOICE_MAX_SIZE_MB=10.0,
        )
        validator = InputValidator(settings=custom_settings)
        assert validator.settings.TEXT_MAX_LENGTH == 1000
        assert validator.settings.TEXT_MIN_LENGTH == 5
        assert validator.settings.VOICE_MAX_SIZE_MB == 10.0


class TestValidateText:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""

    def test_validate_text_normal_input(self):
        """–¢–µ—Å—Ç: –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥"""
        validator = InputValidator()
        text = "–≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞"
        result = validator.validate_text(text)
        assert result == text

    def test_validate_text_strips_whitespace(self):
        """–¢–µ—Å—Ç: —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º"""
        validator = InputValidator()
        text = "   —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏   "
        result = validator.validate_text(text)
        assert result == "—Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"

    def test_validate_text_raises_on_empty_string(self):
        """–¢–µ—Å—Ç: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è"""
        validator = InputValidator()
        with pytest.raises(ValidationError) as exc:
            validator.validate_text("")
        assert exc.value.error_code == "TEXT_TOO_SHORT"

    def test_validate_text_preserves_newlines(self):
        """–¢–µ—Å—Ç: –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é"""
        validator = InputValidator()
        text = "–°—Ç—Ä–æ–∫–∞ 1\n–°—Ç—Ä–æ–∫–∞ 2\n–°—Ç—Ä–æ–∫–∞ 3"
        result = validator.validate_text(text)
        assert result == text

    def test_validate_text_with_special_characters(self):
        """–¢–µ—Å—Ç: —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è"""
        validator = InputValidator()
        text = "–¢–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏: !@#$%^&*()_+-=[]{}|;':,.<>?"
        result = validator.validate_text(text)
        assert result == text

    def test_validate_text_cyrillic(self):
        """–¢–µ—Å—Ç: –∫–∏—Ä–∏–ª–ª–∏—Ü–∞"""
        validator = InputValidator()
        text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! –≠—Ç–æ —Ç–µ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        result = validator.validate_text(text)
        assert result == text

    def test_validate_text_mixed_languages(self):
        """–¢–µ—Å—Ç: —Å–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏"""
        validator = InputValidator()
        text = "Hello, –º–∏—Ä! Test —Ç–µ—Å—Ç 123"
        result = validator.validate_text(text)
        assert result == text

    def test_validate_text_emoji(self):
        """–¢–µ—Å—Ç: —ç–º–æ–¥–∑–∏ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è"""
        validator = InputValidator()
        text = "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ üòä üëç üéâ"
        result = validator.validate_text(text)
        assert result == text

    def test_validate_text_repeated_characters(self):
        """–¢–µ—Å—Ç: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è"""
        validator = InputValidator()
        text = "a" * 100
        result = validator.validate_text(text)
        assert result == text

    def test_validate_text_long_input(self):
        """–¢–µ—Å—Ç: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è"""
        validator = InputValidator()
        # TEXT_MAX_LENGTH –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12000, –∏—Å–ø–æ–ª—å–∑—É–µ–º 13000
        text = "a" * 13000
        with pytest.raises(ValidationError) as exc:
            validator.validate_text(text)
        assert exc.value.error_code == "TEXT_TOO_LONG"


class TestValidateVoiceFile:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""

    def test_validate_voice_normal_file(self):
        """–¢–µ—Å—Ç: –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª"""
        validator = InputValidator()
        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: 1MB, 30 —Å–µ–∫—É–Ω–¥
        file_size = 1024 * 1024  # 1MB
        duration = 30.0
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        validator.validate_voice_file(file_size, duration)

    def test_validate_voice_small_file(self):
        """–¢–µ—Å—Ç: –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª"""
        validator = InputValidator()
        file_size = 1024  # 1KB
        duration = 1.0
        
        validator.validate_voice_file(file_size, duration)

    def test_validate_voice_large_file_rejected(self):
        """–¢–µ—Å—Ç: —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è"""
        validator = InputValidator()
        file_size = 100 * 1024 * 1024
        with pytest.raises(ValidationError) as exc:
            validator.validate_voice_file(file_size, duration=0)
        assert exc.value.error_code == "VOICE_TOO_LARGE"

    def test_validate_voice_zero_duration_allowed(self):
        """–¢–µ—Å—Ç: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è"""
        validator = InputValidator()
        file_size = 1024
        duration = 0.0
        validator.validate_voice_file(file_size, duration)


class TestValidateTranscribedText:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""

    def test_validate_transcribed_normal_text(self):
        """–¢–µ—Å—Ç: –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        validator = InputValidator()
        text = "–≠—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
        result = validator.validate_transcribed_text(text)
        assert result == text

    def test_validate_transcribed_empty_rejected(self):
        """–¢–µ—Å—Ç: –ø—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è"""
        validator = InputValidator()
        with pytest.raises(ValidationError) as exc:
            validator.validate_transcribed_text("")
        assert exc.value.error_code == "TEXT_TOO_SHORT"

    def test_validate_transcribed_whitespace_only_rejected(self):
        """–¢–µ—Å—Ç: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∏–∑ –æ–¥–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è"""
        validator = InputValidator()
        text = "   \n\t  "
        with pytest.raises(ValidationError) as exc:
            validator.validate_transcribed_text(text)
        assert exc.value.error_code == "TEXT_TOO_SHORT"

    def test_validate_transcribed_strips_whitespace(self):
        """–¢–µ—Å—Ç: —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º"""
        validator = InputValidator()
        text = "  —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è  "
        result = validator.validate_transcribed_text(text)
        assert result == "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"

    def test_validate_transcribed_no_spam_check(self):
        """–¢–µ—Å—Ç: –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∞–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã (check_patterns=False)"""
        validator = InputValidator()
        text = "–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞"
        result = validator.validate_transcribed_text(text)
        assert result == text


class TestValidationErrorMessages:
    """–¢–µ—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""

    def test_validation_error_has_message(self):
        """–¢–µ—Å—Ç: ValidationError —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        error = ValidationError("Test error message")
        assert error.message == "Test error message"

    def test_validation_error_has_error_code(self):
        """–¢–µ—Å—Ç: ValidationError —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –æ—à–∏–±–∫–∏"""
        error = ValidationError("Test", "TEST_CODE")
        assert error.error_code == "TEST_CODE"

    def test_validation_error_default_code(self):
        """–¢–µ—Å—Ç: ValidationError –∏–º–µ–µ—Ç –∫–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        error = ValidationError("Test")
        assert error.error_code == "VALIDATION_ERROR"

    def test_error_messages_defined(self):
        """–¢–µ—Å—Ç: –≤—Å–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –∏–º–µ—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        validator = InputValidator()
        expected = {"TEXT_TOO_LONG", "TEXT_TOO_SHORT", "VOICE_TOO_LARGE", "VOICE_MISSING"}
        assert expected.issubset(set(validator.ERROR_MESSAGES))


class TestValidatorWithMocks:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å –º–æ–∫–∞–º–∏ –¥–ª—è async –º–µ—Ç–æ–¥–æ–≤"""

    @pytest.mark.asyncio
    async def test_validate_and_process_text_normal(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        validator = InputValidator()

        mock_message = Mock()
        mock_message.text = "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

        result = await validator.validate_and_process_text(mock_message)
        assert result == "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

    @pytest.mark.asyncio
    async def test_validate_and_process_text_strips_whitespace(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã"""
        validator = InputValidator()

        mock_message = Mock()
        mock_message.text = "  —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏  "

        result = await validator.validate_and_process_text(mock_message)
        assert result == "—Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"

    @pytest.mark.asyncio
    async def test_validate_and_process_voice_no_voice(self):
        """–¢–µ—Å—Ç: —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≥–æ–ª–æ—Å–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É"""
        validator = InputValidator()

        mock_message = Mock()
        mock_message.voice = None

        with pytest.raises(ValidationError) as exc_info:
            await validator.validate_and_process_voice(mock_message)

        assert exc_info.value.error_code == "VOICE_MISSING"

    @pytest.mark.asyncio
    async def test_validate_and_process_voice_with_voice(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        validator = InputValidator()

        mock_message = Mock()
        mock_voice = Mock()
        mock_voice.file_size = 1024 * 100
        mock_voice.duration = 5.0
        mock_message.voice = mock_voice

        await validator.validate_and_process_voice(mock_message)


class TestGlobalValidator:
    """–¢–µ—Å—Ç—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""

    def test_global_validator_exists(self):
        """–¢–µ—Å—Ç: –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        assert global_validator is not None

    def test_global_validator_is_input_validator(self):
        """–¢–µ—Å—Ç: –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä - —ç–∫–∑–µ–º–ø–ª—è—Ä InputValidator"""
        assert isinstance(global_validator, InputValidator)

    def test_global_validator_has_settings(self):
        """–¢–µ—Å—Ç: –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        assert global_validator.settings is not None

    def test_global_validator_has_rate_limiter(self):
        """–¢–µ—Å—Ç: –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–º–µ–µ—Ç rate limiter"""
        assert global_validator.settings is not None


class TestRealWorldScenarios:
    """–¢–µ—Å—Ç—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""

    def test_scenario_user_sends_normal_message(self):
        validator = InputValidator()
        text = "–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–æ–≥–∏ –º–Ω–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é."
        result = validator.validate_text(text)
        assert result == text

    def test_scenario_user_sends_too_short_message(self):
        validator = InputValidator()
        with pytest.raises(ValidationError):
            validator.validate_text("")

    def test_scenario_user_sends_voice(self):
        validator = InputValidator()
        file_size = 2 * 1024 * 1024
        duration = 45.0
        validator.validate_voice_file(file_size, duration)

    def test_scenario_transcription_result(self):
        validator = InputValidator()
        transcribed = "–≠—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Ç–µ–∫—Å—Ç"
        result = validator.validate_transcribed_text(transcribed)
        assert result == transcribed


class TestIsolationFromExternalSystems:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º."""

    def test_validator_works_without_database(self):
        """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ë–î"""
        validator = InputValidator()
        # –ë–î –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
        text = "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ –ë–î"
        result = validator.validate_text(text)
        assert result == text

    def test_validator_works_without_fsm(self):
        """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç FSM"""
        validator = InputValidator()
        # FSM –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
        text = "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ –±–µ–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        result = validator.validate_text(text)
        assert result == text

    def test_validator_works_without_ai_provider(self):
        """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI (OpenAI, Gemini)"""
        validator = InputValidator()
        # AI —Å–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
        text = "–¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ AI, –Ω–æ —Å–∞–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ AI"
        result = validator.validate_text(text)
        assert result == text

    def test_validator_works_without_transcription_service(self):
        """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        validator = InputValidator()
        # –°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        # –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
        file_size = 2 * 1024 * 1024
        duration = 30.0
        validator.validate_voice_file(file_size, duration)

    def test_validator_works_without_metrics_system(self):
        """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫"""
        validator = InputValidator()
        # Prometheus, Sentry –∏ –ø—Ä–æ—á–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–∫–ª—é—á–µ–Ω—ã
        text = "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫"
        result = validator.validate_text(text)
        assert result == text

    def test_validator_works_without_cache(self):
        """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à"""
        validator = InputValidator()
        # Redis –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫—ç—à –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        text1 = "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        text2 = "–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        result1 = validator.validate_text(text1)
        result2 = validator.validate_text(text2)
        assert result1 == text1
        assert result2 == text2

    def test_validator_works_without_network(self):
        """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–æ–∫–∞–ª—å–Ω–æ"""
        validator = InputValidator()
        # –ù–µ—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
        text = "–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
        result = validator.validate_text(text)
        assert result == text

    @pytest.mark.asyncio
    async def test_async_validation_isolated_from_database(self):
        """–¢–µ—Å—Ç: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞ –æ—Ç –ë–î"""
        validator = InputValidator()
        mock_message = Mock()
        mock_message.text = "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ë–î-–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"

        # –ë–î –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        result = await validator.validate_and_process_text(mock_message)
        assert result == "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ë–î-–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"

    def test_validator_rejects_text_independently_of_system_state(self):
        """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        validator = InputValidator()
        # –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º, –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω
        # –æ—Ç–∫–ª–æ–Ω—è—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (TEXT_MAX_LENGTH –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12000)
        with pytest.raises(ValidationError) as exc:
            validator.validate_text("a" * 13000)
        assert exc.value.error_code == "TEXT_TOO_LONG"

        # –ò –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –¥–∞—Å—Ç —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with pytest.raises(ValidationError) as exc:
            validator.validate_text("a" * 13000)
        assert exc.value.error_code == "TEXT_TOO_LONG"

    def test_validator_accepts_valid_data_independently_of_system_state(self):
        """–¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        validator = InputValidator()
        valid_text = "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

        # –ù–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ —Å —Ç–µ–º –∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        for _ in range(3):
            result = validator.validate_text(valid_text)
            assert result == valid_text

    def test_multiple_validators_work_independently(self):
        """–¢–µ—Å—Ç: –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –Ω–µ –≤–ª–∏—è—é—Ç –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞"""
        validator1 = InputValidator()
        validator2 = InputValidator()

        text1 = "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"
        text2 = "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"

        result1 = validator1.validate_text(text1)
        result2 = validator2.validate_text(text2)

        assert result1 == text1
        assert result2 == text2

    def test_validator_settings_isolation(self):
        """–¢–µ—Å—Ç: –∫–∞–∂–¥—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–º–µ–µ—Ç —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings1 = Settings(BOT_TOKEN="token1", TEXT_MAX_LENGTH=100)
        settings2 = Settings(BOT_TOKEN="token2", TEXT_MAX_LENGTH=200)

        validator1 = InputValidator(settings=settings1)
        validator2 = InputValidator(settings=settings2)

        # –¢–µ–∫—Å—Ç –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        text_80 = "a" * 80
        assert validator1.validate_text(text_80) == text_80

        # –¢–µ–∫—Å—Ç –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        text_150 = "a" * 150
        assert validator2.validate_text(text_150) == text_150

        # –ù–æ —Ç–µ–∫—Å—Ç 150 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ
        with pytest.raises(ValidationError):
            validator1.validate_text(text_150)

