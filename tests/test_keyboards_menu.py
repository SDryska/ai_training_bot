"""
–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –º–µ–Ω—é.

–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å:
- app/keyboards/menu.py

–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- get_main_menu_inline —Ñ—É–Ω–∫—Ü–∏—è
- get_back_menu_inline —Ñ—É–Ω–∫—Ü–∏—è
- get_case_controls_inline —Ñ—É–Ω–∫—Ü–∏—è
- get_case_after_review_inline —Ñ—É–Ω–∫—Ü–∏—è
- get_case_description_inline —Ñ—É–Ω–∫—Ü–∏—è
- get_disabled_buttons_markup —Ñ—É–Ω–∫—Ü–∏—è
- disable_previous_buttons —Ñ—É–Ω–∫—Ü–∏—è
- remove_reply_keyboard —Ñ—É–Ω–∫—Ü–∏—è
- disable_buttons_by_id —Ñ—É–Ω–∫—Ü–∏—è
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
import asyncio

from app.keyboards.menu import (
    get_main_menu_inline,
    get_back_menu_inline,
    get_case_controls_inline,
    get_case_after_review_inline,
    get_case_after_review_inline_by_case,
    get_case_controls_inline_by_case,
    get_case_description_inline,
    get_disabled_buttons_markup,
    disable_previous_buttons,
    remove_reply_keyboard,
    disable_buttons_by_id,
    MENU_ITEMS,
    CALLBACK_PREFIX_MENU,
    CALLBACK_NAV_MENU,
    CALLBACK_NAV_RATE,
    CALLBACK_NAV_FAQ,
)


class TestGetMainMenuInline:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_main_menu_inline"""

    def test_get_main_menu_inline_structure(self):
        """–¢–µ—Å—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = get_main_menu_inline()
        
        assert keyboard is not None
        assert len(keyboard.inline_keyboard) == len(MENU_ITEMS) + 1  # –í—Å–µ –∫–µ–π—Å—ã + –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–µ–π—Å –∏–º–µ–µ—Ç —Å–≤–æ—é –∫–Ω–æ–ø–∫—É
        for i, item in enumerate(MENU_ITEMS):
            row = keyboard.inline_keyboard[i]
            assert len(row) == 1
            assert row[0].text == item["title"]
            assert row[0].callback_data == f"{CALLBACK_PREFIX_MENU}{item['id']}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
        help_row = keyboard.inline_keyboard[-1]
        assert len(help_row) == 2
        assert help_row[0].text == "‚ùì FAQ"
        assert help_row[0].callback_data == CALLBACK_NAV_FAQ
        assert help_row[1].text == "‚≠ê –û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞"
        assert help_row[1].callback_data == CALLBACK_NAV_RATE


class TestGetBackMenuInline:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_back_menu_inline"""

    def test_get_back_menu_inline_structure(self):
        """–¢–µ—Å—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
        keyboard = get_back_menu_inline()
        
        assert keyboard is not None
        assert len(keyboard.inline_keyboard) == 1
        
        row = keyboard.inline_keyboard[0]
        assert len(row) == 1
        assert row[0].text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        assert row[0].callback_data == CALLBACK_NAV_MENU


class TestGetCaseControlsInline:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_case_controls_inline"""

    def test_get_case_controls_inline_structure(self):
        """–¢–µ—Å—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∫–µ–π—Å–∞"""
        keyboard = get_case_controls_inline()
        
        assert keyboard is not None
        assert len(keyboard.inline_keyboard) == 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        first_row = keyboard.inline_keyboard[0]
        assert len(first_row) == 2
        assert "üîÑ" in first_row[0].text
        assert "üìä" in first_row[1].text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        second_row = keyboard.inline_keyboard[1]
        assert len(second_row) == 1
        assert second_row[0].text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"


class TestGetCaseAfterReviewInline:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_case_after_review_inline"""

    def test_get_case_after_review_inline_structure(self):
        """–¢–µ—Å—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏"""
        keyboard = get_case_after_review_inline()
        
        assert keyboard is not None
        assert len(keyboard.inline_keyboard) == 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        first_row = keyboard.inline_keyboard[0]
        assert len(first_row) == 1
        assert "üîÑ" in first_row[0].text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        second_row = keyboard.inline_keyboard[1]
        assert len(second_row) == 1
        assert second_row[0].text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"


class TestGetCaseAfterReviewInlineByCase:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_case_after_review_inline_by_case"""

    def test_get_case_after_review_inline_by_case_structure(self):
        """–¢–µ—Å—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ–π—Å–∞"""
        case_id = "test_case"
        keyboard = get_case_after_review_inline_by_case(case_id)
        
        assert keyboard is not None
        assert len(keyboard.inline_keyboard) == 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º case_id
        first_row = keyboard.inline_keyboard[0]
        assert f"case:{case_id}:restart" in first_row[0].callback_data

    def test_get_case_after_review_inline_by_case_different_ids(self):
        """–¢–µ—Å—Ç: —Ä–∞–∑–Ω—ã–µ case_id –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Ä–∞–∑–Ω—ã–µ callbacks"""
        keyboard1 = get_case_after_review_inline_by_case("case1")
        keyboard2 = get_case_after_review_inline_by_case("case2")
        
        assert keyboard1.inline_keyboard[0][0].callback_data != keyboard2.inline_keyboard[0][0].callback_data


class TestGetCaseControlsInlineByCase:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_case_controls_inline_by_case"""

    def test_get_case_controls_inline_by_case_structure(self):
        """–¢–µ—Å—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ–π—Å–∞"""
        case_id = "test_case"
        keyboard = get_case_controls_inline_by_case(case_id)
        
        assert keyboard is not None
        assert len(keyboard.inline_keyboard) == 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callbacks —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º case_id
        first_row = keyboard.inline_keyboard[0]
        assert f"case:{case_id}:restart" in first_row[0].callback_data
        assert f"case:{case_id}:review" in first_row[1].callback_data


class TestGetCaseDescriptionInline:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_case_description_inline"""

    def test_get_case_description_inline_structure(self):
        """–¢–µ—Å—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–ø–∏—Å–∞–Ω–∏—è –∫–µ–π—Å–∞"""
        case_id = "test_case"
        keyboard = get_case_description_inline(case_id)
        
        assert keyboard is not None
        assert len(keyboard.inline_keyboard) == 3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        first_row = keyboard.inline_keyboard[0]
        assert len(first_row) == 1
        assert "üé¨" in first_row[0].text
        assert f"case:{case_id}:start" in first_row[0].callback_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏
        second_row = keyboard.inline_keyboard[1]
        assert len(second_row) == 1
        assert "üìö" in second_row[0].text
        assert f"case:{case_id}:theory" in second_row[0].callback_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        third_row = keyboard.inline_keyboard[2]
        assert len(third_row) == 1
        assert third_row[0].text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"


class TestGetDisabledButtonsMarkup:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_disabled_buttons_markup"""

    def test_get_disabled_buttons_markup_structure(self):
        """–¢–µ—Å—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É—Å—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = get_disabled_buttons_markup()
        
        assert keyboard is not None
        assert len(keyboard.inline_keyboard) == 0


class TestDisablePreviousButtons:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ disable_previous_buttons"""

    @pytest.mark.asyncio
    async def test_disable_previous_buttons_success(self):
        """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
        mock_message = MagicMock()
        mock_message.chat.id = 12345
        mock_message.message_id = 123
        mock_bot = MagicMock()
        mock_bot.edit_message_reply_markup = AsyncMock()
        mock_message.bot = mock_bot
        
        await disable_previous_buttons(mock_message)
        
        mock_bot.edit_message_reply_markup.assert_called_once()
        call_kwargs = mock_bot.edit_message_reply_markup.call_args.kwargs
        assert call_kwargs["chat_id"] == 12345
        assert call_kwargs["message_id"] == 123

    @pytest.mark.asyncio
    async def test_disable_previous_buttons_with_bot_param(self):
        """–¢–µ—Å—Ç: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å —è–≤–Ω—ã–º bot –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º"""
        mock_message = MagicMock()
        mock_message.chat.id = 12345
        mock_message.message_id = 123
        mock_bot = MagicMock()
        mock_bot.edit_message_reply_markup = AsyncMock()
        
        await disable_previous_buttons(mock_message, bot=mock_bot)
        
        mock_bot.edit_message_reply_markup.assert_called_once()

    @pytest.mark.asyncio
    async def test_disable_previous_buttons_exception_handling(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫"""
        mock_message = MagicMock()
        mock_message.chat.id = 12345
        mock_message.message_id = 123
        mock_bot = MagicMock()
        mock_bot.edit_message_reply_markup = AsyncMock(side_effect=Exception("Edit error"))
        mock_message.bot = mock_bot
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        await disable_previous_buttons(mock_message)

    @pytest.mark.asyncio
    async def test_disable_previous_buttons_no_message(self):
        """–¢–µ—Å—Ç: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç"""
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        await disable_previous_buttons(None)


class TestRemoveReplyKeyboard:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ remove_reply_keyboard"""

    @pytest.mark.asyncio
    async def test_remove_reply_keyboard_success(self):
        """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        mock_message = MagicMock()
        mock_message.chat.id = 12345
        mock_message.bot = MagicMock()
        mock_tmp_message = MagicMock()
        mock_tmp_message.chat.id = 12345
        mock_tmp_message.message_id = 456
        mock_message.answer = AsyncMock(return_value=mock_tmp_message)
        mock_message.bot.delete_message = AsyncMock()
        
        with patch("asyncio.sleep", new_callable=AsyncMock):
            await remove_reply_keyboard(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –æ–±–∞ –º–µ—Ç–æ–¥–∞
        assert mock_message.answer.call_count == 1
        assert mock_message.bot.delete_message.call_count == 1

    @pytest.mark.asyncio
    async def test_remove_reply_keyboard_exception_handling(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        mock_message = MagicMock()
        mock_message.chat.id = 12345
        mock_message.bot = MagicMock()
        mock_message.bot.send_message = AsyncMock(side_effect=Exception("Send error"))
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        await remove_reply_keyboard(mock_message)


class TestDisableButtonsById:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ disable_buttons_by_id"""

    @pytest.mark.asyncio
    async def test_disable_buttons_by_id_success(self):
        """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ ID"""
        mock_bot = MagicMock()
        mock_bot.edit_message_reply_markup = AsyncMock()
        
        await disable_buttons_by_id(mock_bot, 12345, 123)
        
        mock_bot.edit_message_reply_markup.assert_called_once()
        call_kwargs = mock_bot.edit_message_reply_markup.call_args.kwargs
        assert call_kwargs["chat_id"] == 12345
        assert call_kwargs["message_id"] == 123

    @pytest.mark.asyncio
    async def test_disable_buttons_by_id_exception_handling(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ ID"""
        mock_bot = MagicMock()
        mock_bot.edit_message_reply_markup = AsyncMock(side_effect=Exception("Edit error"))
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        await disable_buttons_by_id(mock_bot, 12345, 123)

