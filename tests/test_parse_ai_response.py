"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤.

–ú–æ–¥—É–ª–∏:
- app/cases/fb_peer/handler.py::parse_ai_response
- app/cases/fb_employee/handler.py::parse_ai_response
- app/cases/career_dialog/handler.py::parse_ai_response

–í—Å–µ —Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–æ —Ä–∞–∑–Ω—ã–µ fallback –ø–æ–ª—è.
"""

import pytest
import json

from app.cases.fb_peer.handler import parse_ai_response as parse_fb_peer
from app.cases.fb_employee.handler import parse_ai_response as parse_fb_employee
from app.cases.career_dialog.handler import parse_ai_response as parse_career_dialog


# –í—Å–µ —Ç—Ä–∏ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
ALL_PARSERS = [
    pytest.param(parse_fb_peer, id="fb_peer"),
    pytest.param(parse_fb_employee, id="fb_employee"),
    pytest.param(parse_career_dialog, id="career_dialog"),
]


class TestParseAIResponseValidJSON:
    """–¢–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö JSON –æ—Ç–≤–µ—Ç–æ–≤"""

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_clean_json(self, parser):
        """–¢–µ—Å—Ç: —á–∏—Å—Ç—ã–π JSON –æ—Ç–≤–µ—Ç"""
        response = json.dumps({
            "ReplyText": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
            "Behavior": True,
            "Result": False
        })
        
        result = parser(response)
        
        assert result["ReplyText"] == "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
        assert result["Behavior"] is True
        assert result["Result"] is False

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_with_text_before(self, parser):
        """–¢–µ—Å—Ç: JSON —Å —Ç–µ–∫—Å—Ç–æ–º –¥–æ –Ω–µ–≥–æ"""
        response = "–í–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç: " + json.dumps({
            "ReplyText": "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç",
            "Question": True
        })
        
        result = parser(response)
        
        assert result["ReplyText"] == "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç"
        assert result["Question"] is True

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_with_text_after(self, parser):
        """–¢–µ—Å—Ç: JSON —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å–ª–µ –Ω–µ–≥–æ"""
        response = json.dumps({
            "ReplyText": "–û—Ç–≤–µ—Ç –æ—Ç AI",
            "Emotion": True
        }) + "\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç"
        
        result = parser(response)
        
        assert result["ReplyText"] == "–û—Ç–≤–µ—Ç –æ—Ç AI"
        assert result["Emotion"] is True

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_surrounded_by_text(self, parser):
        """–¢–µ—Å—Ç: JSON –æ–∫—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç–æ–º —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω"""
        response = "–ü—Ä–µ—Ñ–∏–∫—Å " + json.dumps({
            "ReplyText": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç",
            "Agreement": False
        }) + " –°—É—Ñ—Ñ–∏–∫—Å"
        
        result = parser(response)
        
        assert result["ReplyText"] == "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç"
        assert result["Agreement"] is False

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_with_newlines(self, parser):
        """–¢–µ—Å—Ç: JSON —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        response = """
        {
            "ReplyText": "–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π\n–æ—Ç–≤–µ—Ç",
            "Behavior": true
        }
        """
        
        result = parser(response)
        
        assert "–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π" in result["ReplyText"]
        assert "\n" in result["ReplyText"]

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_with_cyrillic(self, parser):
        """–¢–µ—Å—Ç: JSON —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"""
        response = json.dumps({
            "ReplyText": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            "Result": True
        }, ensure_ascii=False)
        
        result = parser(response)
        
        assert result["ReplyText"] == "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_with_special_characters(self, parser):
        """–¢–µ—Å—Ç: JSON —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏"""
        response = json.dumps({
            "ReplyText": "–¢–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏: !@#$%^&*()_+-=[]{}|;':\",./<>?",
            "Question": False
        })
        
        result = parser(response)
        
        assert "!@#$%^&*()" in result["ReplyText"]

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_with_emoji(self, parser):
        """–¢–µ—Å—Ç: JSON —Å —ç–º–æ–¥–∑–∏"""
        response = json.dumps({
            "ReplyText": "–û—Ç–ª–∏—á–Ω–æ! üëç –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üéâ",
            "Emotion": True
        }, ensure_ascii=False)
        
        result = parser(response)
        
        assert "üëç" in result["ReplyText"]
        assert "üéâ" in result["ReplyText"]

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_minimal_required_field(self, parser):
        """–¢–µ—Å—Ç: —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ ReplyText"""
        response = json.dumps({
            "ReplyText": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
        })
        
        result = parser(response)
        
        assert result["ReplyText"] == "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_with_extra_fields(self, parser):
        """–¢–µ—Å—Ç: JSON —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        response = json.dumps({
            "ReplyText": "–û—Ç–≤–µ—Ç",
            "ExtraField": "extra_value",
            "AnotherField": 123,
            "Behavior": True
        })
        
        result = parser(response)
        
        assert result["ReplyText"] == "–û—Ç–≤–µ—Ç"
        assert "ExtraField" in result  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è


class TestParseAIResponseInvalidJSON:
    """–¢–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö JSON –æ—Ç–≤–µ—Ç–æ–≤ (fallback)"""

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_plain_text(self, parser):
        """–¢–µ—Å—Ç: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ JSON"""
        response = "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ JSON"
        
        result = parser(response)
        
        assert result["ReplyText"] == response
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å False
        for key, value in result.items():
            if key != "ReplyText":
                assert value is False

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_malformed_json(self, parser):
        """–¢–µ—Å—Ç: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"""
        response = '{"ReplyText": "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π JSON'
        
        result = parser(response)
        
        assert result["ReplyText"] == response

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_without_reply_text(self, parser):
        """–¢–µ—Å—Ç: JSON –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è ReplyText"""
        response = json.dumps({
            "Behavior": True,
            "Result": False
        })
        
        result = parser(response)
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ ReplyText (fallback)
        assert result["ReplyText"] == response

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_empty_string(self, parser):
        """–¢–µ—Å—Ç: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"""
        response = ""
        
        result = parser(response)
        
        assert result["ReplyText"] == ""
        for key, value in result.items():
            if key != "ReplyText":
                assert value is False

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_only_braces(self, parser):
        """–¢–µ—Å—Ç: —Ç–æ–ª—å–∫–æ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏"""
        response = "{}"
        
        result = parser(response)
        
        # –ü—É—Å—Ç–æ–π JSON –±–µ–∑ ReplyText -> fallback
        assert result["ReplyText"] == "{}"

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_nested_json_structure(self, parser):
        """–¢–µ—Å—Ç: –≤–ª–æ–∂–µ–Ω–Ω–∞—è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"""
        response = json.dumps({
            "ReplyText": "–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç",
            "Nested": {
                "Field1": "value1",
                "Field2": "value2"
            }
        })
        
        result = parser(response)
        
        assert result["ReplyText"] == "–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç"
        # –í–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
        assert "Nested" in result

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_array(self, parser):
        """–¢–µ—Å—Ç: JSON –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞"""
        response = json.dumps([
            {"ReplyText": "–ü–µ—Ä–≤—ã–π"},
            {"ReplyText": "–í—Ç–æ—Ä–æ–π"}
        ])
        
        result = parser(response)
        
        # –ú–∞—Å—Å–∏–≤ –Ω–µ –∏–º–µ–µ—Ç ReplyText -> fallback
        assert result["ReplyText"] == response

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_multiple_json_objects(self, parser):
        """–¢–µ—Å—Ç: –Ω–µ—Å–∫–æ–ª—å–∫–æ JSON –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        
        –ü–∞—Ä—Å–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç find('{') –∏ rfind('}'), —á—Ç–æ –±–µ—Ä–µ—Ç –æ—Ç –ø–µ—Ä–≤–æ–π –¥–æ –ü–û–°–õ–ï–î–ù–ï–ô
        —Å–∫–æ–±–∫–∏. –ü—Ä–∏ –¥–≤—É—Ö JSON –æ–±—ä–µ–∫—Ç–∞—Ö —ç—Ç–æ –¥–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON ‚Üí fallback.
        """
        response = json.dumps({"ReplyText": "–ü–µ—Ä–≤—ã–π"}) + " " + json.dumps({"ReplyText": "–í—Ç–æ—Ä–æ–π"})
        
        result = parser(response)
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON (–¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞) ‚Üí fallback –Ω–∞ –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        assert result["ReplyText"] == response
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è False
        for key, value in result.items():
            if key != "ReplyText":
                assert value is False

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_parse_json_with_null_values(self, parser):
        """–¢–µ—Å—Ç: JSON —Å null –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        response = json.dumps({
            "ReplyText": "–û—Ç–≤–µ—Ç",
            "Behavior": None,
            "Result": None
        })
        
        result = parser(response)
        
        assert result["ReplyText"] == "–û—Ç–≤–µ—Ç"
        assert result["Behavior"] is None
        assert result["Result"] is None


class TestParseFBPeerSpecific:
    """–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è FB Peer –ø–∞—Ä—Å–µ—Ä–∞"""

    def test_fb_peer_fallback_fields(self):
        """–¢–µ—Å—Ç: fallback –ø–æ–ª—è –¥–ª—è FB Peer"""
        result = parse_fb_peer("Plain text")
        
        assert result["ReplyText"] == "Plain text"
        assert result["Behavior"] is False
        assert result["Result"] is False
        assert result["Emotion"] is False
        assert result["Question"] is False
        assert result["Agreement"] is False

    def test_fb_peer_all_provd_fields(self):
        """–¢–µ—Å—Ç: –≤—Å–µ –ü–†–û–í–î –ø–æ–ª—è"""
        response = json.dumps({
            "ReplyText": "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç",
            "Behavior": True,
            "Result": True,
            "Emotion": True,
            "Question": True,
            "Agreement": True
        })
        
        result = parse_fb_peer(response)
        
        assert all(result[key] is True for key in ["Behavior", "Result", "Emotion", "Question", "Agreement"])


class TestParseFBEmployeeSpecific:
    """–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è FB Employee –ø–∞—Ä—Å–µ—Ä–∞"""

    def test_fb_employee_fallback_fields(self):
        """–¢–µ—Å—Ç: fallback –ø–æ–ª—è –¥–ª—è FB Employee"""
        result = parse_fb_employee("Plain text")
        
        assert result["ReplyText"] == "Plain text"
        assert result["Behavior"] is False
        assert result["Result"] is False
        assert result["Emotion"] is False
        assert result["Question"] is False
        assert result["Agreement"] is False


class TestParseCareerDialogSpecific:
    """–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Career Dialog –ø–∞—Ä—Å–µ—Ä–∞"""

    def test_career_dialog_fallback_fields(self):
        """–¢–µ—Å—Ç: fallback –ø–æ–ª—è –¥–ª—è Career Dialog"""
        result = parse_career_dialog("Plain text")
        
        assert result["ReplyText"] == "Plain text"
        assert result["Aspirations"] is False
        assert result["Strengths"] is False
        assert result["Development"] is False
        assert result["Opportunities"] is False
        assert result["Plan"] is False

    def test_career_dialog_all_fields(self):
        """–¢–µ—Å—Ç: –≤—Å–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–æ–ª—è"""
        response = json.dumps({
            "ReplyText": "–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç",
            "Aspirations": True,
            "Strengths": True,
            "Development": True,
            "Opportunities": True,
            "Plan": True
        })
        
        result = parse_career_dialog(response)
        
        assert all(result[key] is True for key in ["Aspirations", "Strengths", "Development", "Opportunities", "Plan"])


class TestRealWorldScenarios:
    """–¢–µ—Å—Ç—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—Ç AI"""

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_scenario_typical_ai_response(self, parser):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: —Ç–∏–ø–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI"""
        response = json.dumps({
            "ReplyText": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            "Question": True,
            "Emotion": True
        })
        
        result = parser(response)
        
        assert "–°–ø–∞—Å–∏–±–æ" in result["ReplyText"]
        assert result["Question"] is True

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_scenario_ai_response_with_markdown(self, parser):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: AI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç markdown"""
        response = json.dumps({
            "ReplyText": "**–í–∞–∂–Ω–æ:** –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ *–¥–µ—Ç–∞–ª–∏*.",
            "Behavior": True
        })
        
        result = parser(response)
        
        assert "**–í–∞–∂–Ω–æ:**" in result["ReplyText"]
        assert "*–¥–µ—Ç–∞–ª–∏*" in result["ReplyText"]

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_scenario_ai_explains_json(self, parser):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: AI –æ–±—ä—è—Å–Ω—è–µ—Ç —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON"""
        response = '–í–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n{"ReplyText": "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç", "Result": true}'
        
        result = parser(response)
        
        assert result["ReplyText"] == "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç"

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_scenario_ai_forgets_json_format(self, parser):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: AI –∑–∞–±—ã–≤–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å JSON"""
        response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ—Ç –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã."
        
        result = parser(response)
        
        # –î–æ–ª–∂–µ–Ω gracefully –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ ReplyText
        assert result["ReplyText"] == response
        assert all(value is False for key, value in result.items() if key != "ReplyText")

    @pytest.mark.parametrize("parser", ALL_PARSERS)
    def test_scenario_long_reply_text(self, parser):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        long_text = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. " * 100
        response = json.dumps({
            "ReplyText": long_text,
            "Agreement": True
        })
        
        result = parser(response)
        
        assert len(result["ReplyText"]) > 1000
        assert result["Agreement"] is True

