"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π polling –∏ webhook.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
- –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∏–∑ .env (pydantic-settings).
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
- –ü–æ–¥–Ω–∏–º–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ Prometheus –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É.
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –∑–∞–¥–∞–Ω–∏—è/—Ä–∞—Å—Å—ã–ª–∫–∏).
- –°–æ–∑–¥–∞—ë—Ç Bot/Dispatcher/Router (aiogram v3) –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start.
- –ó–∞–ø—É—Å–∫–∞–µ—Ç polling (dev) –∏–ª–∏ webhook (production).
- Graceful shutdown –¥–ª—è zero-downtime deploys.
"""

import asyncio
import logging
import signal
from contextlib import asynccontextmanager

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from app.metrics import start_metrics
from app.config.settings import Settings
from app.storage import PostgresFSMStorage
from app.handlers.auth import router as auth_router
from app.cases.fb_employee.handler import router as case_fb_employee_router
from app.cases.fb_peer.handler import router as case_fb_peer_router
from app.cases.career_dialog.handler import router as case_career_dialog_router
from app.handlers.nav import router as nav_router
from app.handlers.rating import router as rating_router
from app.handlers.help import router as help_router
from app.handlers.fallback import router as fallback_router
from app.services.auth import run_migrations, normalize_db_url
from app.services.ai_service import initialize_ai_providers
from app.middlewares.errors import ErrorsMiddleware
from app.middlewares.roles import RolesMiddleware

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ _export_once –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
try:
    from standalone.db_to_sheets import ExportSettings, _export_once as export_once
except Exception:
    ExportSettings = None  # type: ignore
    export_once = None  # type: ignore

# -----------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ app/config/settings.py
# -----------------------------


# -----------------------------
# –ú–µ—Ç—Ä–∏–∫–∏ Prometheus –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ app/metrics.py
# -----------------------------


# -----------------------------
# –†–æ—É—Ç–µ—Ä—ã: –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ app/handlers/auth.py
# -----------------------------


# -----------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
# -----------------------------
shutdown_event = asyncio.Event()


# -----------------------------
# Health check endpoint
# -----------------------------
async def health_check(request: web.Request) -> web.Response:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Amvera."""
    return web.Response(text="OK", status=200)


# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -----------------------------
async def main() -> None:
    settings = Settings()

    # 1) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ; –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ JSON-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    )
    logger = logging.getLogger("bot")

    # 2) Sentry (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω DSN)
    if settings.SENTRY_DSN:
        try:
            import sentry_sdk

            sentry_sdk.init(
                dsn=settings.SENTRY_DSN,
                environment=settings.SENTRY_ENV,
                # –¢—Ä–µ–π—Å–∏–Ω–≥ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ; –¥–µ—Ä–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –¥–ª—è 80/20
                traces_sample_rate=0.0,
            )
            logger.info("Sentry –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Sentry: %s", e)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î (–µ—Å–ª–∏ DATABASE_URL –∑–∞–¥–∞–Ω)
    if settings.DATABASE_URL:
        logger.info("üìä –ë–î –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        logger.info("  DATABASE_URL: %s", settings.DATABASE_URL.split('@')[1] if '@' in settings.DATABASE_URL else settings.DATABASE_URL)
        run_migrations(logger, normalize_db_url(settings.DATABASE_URL))
    else:
        logger.warning("‚ö†Ô∏è  DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    initialize_ai_providers()
    
    # –í—ã–±–æ—Ä FSM storage: PostgreSQL –µ—Å–ª–∏ –µ—Å—Ç—å DATABASE_URL, –∏–Ω–∞—á–µ Memory
    if settings.DATABASE_URL:
        fsm_storage = PostgresFSMStorage(settings.DATABASE_URL)
        logger.info("‚úÖ PostgresFSMStorage: —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î")
    else:
        fsm_storage = MemoryStorage()
        logger.info("‚ö†Ô∏è  MemoryStorage: —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –≤ –ø–∞–º—è—Ç–∏ (–ø–æ—Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)")

    # 3) –ú–µ—Ç—Ä–∏–∫–∏ Prometheus (–ø–æ–¥–Ω–∏–º–∞–µ–º –ª–µ–≥–∫–∏–π HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É)
    try:
        start_metrics(settings.METRICS_PORT)
        logger.info("–ú–µ—Ç—Ä–∏–∫–∏ Prometheus –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ http://localhost:%d/", settings.METRICS_PORT)
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫: %s", e)

    # 4) –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (—Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è)
    scheduler = AsyncIOScheduler(timezone=settings.APSCHEDULER_TIMEZONE)
    # –§–æ–Ω–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets
    if settings.SHEETS_EXPORT_ENABLED and ExportSettings and export_once:
        try:
            export_settings = ExportSettings()
            interval = max(30, int(export_settings.EXPORT_INTERVAL_SECONDS))
            async def export_job():
                try:
                    await export_once(export_settings)
                except Exception as e:
                    logger = logging.getLogger("sheets_export")
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
            asyncio.create_task(export_job())
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ APScheduler
            scheduler.add_job(export_job, "interval", seconds=interval, id="sheets_export")
        except Exception as e:
            logger = logging.getLogger("sheets_export")
            logger.warning(f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler –∑–∞–ø—É—â–µ–Ω")

    # 5) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram (Bot, Dispatcher, Routers)
    bot = Bot(token=settings.BOT_TOKEN)
    dp = Dispatcher(storage=fsm_storage)
    # Global middlewares: errors and roles context
    dp.update.outer_middleware(ErrorsMiddleware())
    dp.update.outer_middleware(RolesMiddleware())
    # Ensure per-pipeline coverage
    dp.message.outer_middleware(ErrorsMiddleware())
    dp.message.outer_middleware(RolesMiddleware())
    dp.callback_query.outer_middleware(ErrorsMiddleware())
    dp.callback_query.outer_middleware(RolesMiddleware())

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(auth_router)
    dp.include_router(help_router)
    dp.include_router(case_fb_employee_router)
    dp.include_router(case_fb_peer_router)
    dp.include_router(case_career_dialog_router)
    dp.include_router(nav_router)
    dp.include_router(rating_router)
    # –î–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º: catch-all —Ö—ç–Ω–¥–ª–µ—Ä—ã
    dp.include_router(fallback_router)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    def handle_signal(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–ø—É—Å–∫ graceful shutdown...")
        shutdown_event.set()

    signal.signal(signal.SIGTERM, handle_signal)
    signal.signal(signal.SIGINT, handle_signal)

    try:
        if settings.WEBHOOK_ENABLED and settings.WEBHOOK_HOST:
            # WEBHOOK MODE (Production)
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            webhook_url = f"{settings.WEBHOOK_HOST.rstrip('/')}{settings.WEBHOOK_PATH}"
            await bot.set_webhook(
                url=webhook_url,
                allowed_updates=dp.resolve_used_update_types(),
                drop_pending_updates=False,  # –ù–µ —Ç–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
            )
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

            # –°–æ–∑–¥–∞—ë–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()
            
            # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint
            app.router.add_get("/health", health_check)
            app.router.add_get("/", health_check)  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook handler
            webhook_handler = SimpleRequestHandler(
                dispatcher=dp,
                bot=bot,
            )
            webhook_handler.register(app, path=settings.WEBHOOK_PATH)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, "0.0.0.0", settings.WEBHOOK_PORT)
            await site.start()
            
            logger.info(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {settings.WEBHOOK_PORT}")
            logger.info(f"Health check –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://0.0.0.0:{settings.WEBHOOK_PORT}/health")
            
            # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await shutdown_event.wait()
            
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
            await runner.cleanup()
            await bot.delete_webhook(drop_pending_updates=False)
            
        else:
            # POLLING MODE (Development)
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (dev)")
            
            # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            await bot.delete_webhook(drop_pending_updates=False)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å graceful shutdown
            polling_task = asyncio.create_task(
                dp.start_polling(
                    bot,
                    allowed_updates=dp.resolve_used_update_types(),
                )
            )
            
            # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            shutdown_task = asyncio.create_task(shutdown_event.wait())
            done, pending = await asyncio.wait(
                [polling_task, shutdown_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
                    
            logger.info("Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        scheduler.shutdown(wait=False)
        try:
            await dp.storage.close()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ storage: {e}")
        try:
            await bot.session.close()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ bot session: {e}")
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C / —Å–∏–≥–Ω–∞–ª—ã –û–°
        pass