"""–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞."""

from typing import Optional

from aiogram.types import Message

from app.config.settings import Settings


class ValidationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""

    def __init__(self, message: str, error_code: str = "VALIDATION_ERROR"):
        self.message = message
        self.error_code = error_code
        super().__init__(message)


class InputValidator:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞."""

    ERROR_MESSAGES = {
        "TEXT_TOO_LONG": "üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. {limit} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å.",
        "TEXT_TOO_SHORT": "üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ.",
        "VOICE_TOO_LARGE": "üé§ –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. {limit}–ú–ë). –ó–∞–ø–∏—à–∏—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ.",
        "VOICE_MISSING": "üé§ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    }

    def __init__(self, settings: Optional[Settings] = None):
        self.settings = settings or Settings()

    def _format_text_too_long(self) -> str:
        return self.ERROR_MESSAGES["TEXT_TOO_LONG"].format(limit=self.settings.TEXT_MAX_LENGTH)

    def _format_voice_too_large(self) -> str:
        return self.ERROR_MESSAGES["VOICE_TOO_LARGE"].format(limit=self.settings.VOICE_MAX_SIZE_MB)

    def validate_text(self, text: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è—è —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω—É."""

        cleaned_text = (text or "").strip()
        length = len(cleaned_text)

        if length < self.settings.TEXT_MIN_LENGTH:
            raise ValidationError(self.ERROR_MESSAGES["TEXT_TOO_SHORT"], "TEXT_TOO_SHORT")

        if length > self.settings.TEXT_MAX_LENGTH:
            raise ValidationError(self._format_text_too_long(), "TEXT_TOO_LONG")

        return cleaned_text

    def validate_voice_file(self, file_size: int, duration: float | None = None) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞."""

        size_mb = file_size / (1024 * 1024)
        if size_mb > self.settings.VOICE_MAX_SIZE_MB:
            raise ValidationError(self._format_voice_too_large(), "VOICE_TOO_LARGE")

    def validate_transcribed_text(self, text: str) -> str:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–º –∂–µ –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ –∏ validate_text."""

        return self.validate_text(text)

    async def validate_and_process_text(self, message: Message) -> str:
        """–ì–æ—Ç–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –∫ –ø–µ—Ä–µ–¥–∞—á–µ –≤ –¥–∏–∞–ª–æ–≥–æ–≤—É—é –º–æ–¥–µ–ª—å."""

        return self.validate_text(message.text or "")

    async def validate_and_process_voice(self, message: Message) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –ø—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏."""

        if not message.voice:
            raise ValidationError(self.ERROR_MESSAGES["VOICE_MISSING"], "VOICE_MISSING")

        self.validate_voice_file(message.voice.file_size, message.voice.duration)


validator = InputValidator()
