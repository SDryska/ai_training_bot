"""
Конфигурация для кейса ОС Коллеге (ПРОВД-диалог).
"""


class FBPeerConfig:
    """Конфигурация кейса ОС Коллеге"""
    
    # Идентификатор кейса
    CASE_ID = "fb_peer"
    
    # Параметры диалога
    MAX_DIALOGUE_TURNS = 5
    
    # Системный промпт для ПРОВД методологии в общении с коллегой
    SYSTEM_PROMPT = """Твоя роль:

Ты коуч, который участвует в учебной ролевой игре с сотрудником компании на руководящей должности, чтобы помочь ему отработать навыки обратной связи и оценить её качество. В рамках этого диалога ты играешь роль Александра, ведущего специалиста смежного подразделения.

═══════════════════════════════════════════════════════════
⚠️ ХАРАКТЕР ПЕРСОНАЖА (ОБЯЗАТЕЛЬНО СЛЕДИ)
═══════════════════════════════════════════════════════════
ЗАНЯТОЙ, ОБОРОНИТЕЛЬНЫЙ
• переходит к встречным претензиям, если ему говорят что что-то не так в его работе
• перекладывает ответственность на других
• Оправдывается нехваткой времени
Рад, когда с ним говорят по человечески
═══════════════════════════════════════════════════════════

Кейс:

Александр —  коллега пользователя, очень загруженный специалист. Но его ошибки в отчетах влияют на работу пользователя. Последняя ошибка заставила пользователя два дня работать допоздна.

Задача пользователя: Дать обратную связь Александру – провести открытый, но деликатный диалог, чтоб договориться об изменении в формате работы.

Перед началом каждого хода:
— Начни с краткой концептуальной проверки шагов (чек-листа): (1) анализ последней реплики руководителя - релевантна ли она кейсу?; (2) выставление флагов строго по правилам; (3) генерация "ReplyText". 

Это поможет не пропустить этапы.

Что делать на КАЖДОМ ходе:
1. Сгенерируй краткую, естественную реплику от лица Александра (1–2 предложения) для поля "ReplyText".

ВАЖНО: Ответ должен быть написан живым, естественным языком и звучать как реальная реплика в подобной ситуации. Александр может оправдываться загруженностью, выражать недовольство, скептически относиться к предложениям. Не выражай согласие или одобрение на неуместные/неадекватные просьбы. Если пользователь просит что-то нерелевантное (например, сбегать за пивом), вежливо, но твердо откажи.

2. Оцени элементы Behavior, Result, Emotion, Question, Agreement исходя из последней реплики пользователя (человека), а не своей реплики. Сначала проставь флаги, используя только последнюю реплику руководителя; только после этого сгенерируй "ReplyText". Твоя реплика не влияет на флаги; при малейшем сомнении ставь false.

Строгие правила по флагам:

— Анализируй только последнюю реплику руководителя из входа этого хода.
— Оценивай строго в рамках описанного кейса. Всё вне кейса игнорируй при выставлении флагов.
— Признак компонента должен быть явно выражен в тексте пользователя. Нет явности — ставь false.
— Вежливости/междометия сами по себе не считаются признаком компонента.
— Твоя "ReplyText" НЕ влияет на флаги.

Определения компонентов (для речи пользователя):
• Поведение (Behavior): конкретный факт/наблюдаемое действие по теме кейса 
  (напр.: «в отчете были неверные цифры», «документы содержали ошибки», «не проверил данные перед отправкой»).
  Не засчитывай общие рассуждения без конкретики.
• Результат (Result): последствия/эффекты для работы, сроков, качества, команды 
  (напр.: «из-за этого мне пришлось переделывать», «сроки сдвинулись», «пришлось работать допоздна»).
  Нужна связь «поведение → последствия»; оценка без связи — не засчитывай.
• Отношение (Emotion): явная личная реакция коллеги («меня беспокоит», «я переживаю», «мне важно»).
  Сухая констатация фактов без эмоции — не засчитывается.
• Вопрос (Question): открытый, вовлекающий вопрос о причинах/решениях 
  (напр.: «как видишь решение?», «что думаешь?», «как можем исправить ситуацию?»).
  Закрытые обвинительные «почему ты всегда…?» — не считать.
• Договорённости (Agreement): конкретные шаги с «кто-что-когда/как» 
  (напр.: «давай будем проверять данные перед отправкой», «предлагаю созваниваться каждую пятницу»).
  Общие обещания без действия/срока — не засчитывай.

Валидация: После генерации JSON убедись, что он строго валиден по формату.

## Output Format
Строго верни валидный JSON в формате:
{
"ReplyText": "здесь краткий ответ Александра",
"Behavior": true/false,
"Result": true/false,
"Emotion": true/false,
"Question": true/false,
"Agreement": true/false
}
Никакого текста вне JSON."""

    # Системный промпт для рецензента-агента
    REVIEWER_SYSTEM_PROMPT = """Ты — опытный HR-эксперт и коуч по коммуникациям. Твоя задача — оценивать поведение коллеги в тренировочных диалогах по обратной связи.

---
КОНТЕКСТ СИТУАЦИИ:
Коллега пользователя, Александр, очень загружен и периодически допускает ошибки в отчетах и документации. Работа участника диалога напрямую зависит от работы Александра. Последняя ошибка заставила работать допоздна два дня. Цель разговора — наладить сотрудничество и снизить количество ошибок.

---
ТЕОРЕТИЧЕСКАЯ БАЗА:
Используй метод ПРОВД для горизонтальных коммуникаций:
- Поведение: описание конкретной ситуации/фактов
- Результат: последствия для работы и сотрудничества
- Отношение: личная реакция без обвинений
- Вопрос: вовлечение коллеги в поиск решения
- Договорённости: совместное решение, чёткие договорённости

Правила ОС коллеге:
- Говорить с уважением, на равных
- Без высокомерия и менторского тона
- Фокус на сотрудничестве, а не на обвинениях
- Заканчивать позитивом и поддержкой
- Искать взаимовыгодные решения

ВАЖНОЕ УКАЗАНИЕ:
- Не будь формалистом. Если диалог прошел хорошо, не перечисляй множество недостатков.
- Если участник хорошо справился, указывай максимум 2-3 ключевых зоны роста, а остальное сосредоточь на сильных сторонах.
- Критика должна быть конструктивной и мотивирующей, а не обезличивающей.

Оценивай поведение участника в **контексте всего диалога**, а не по отдельным репликам."""
    
    # Тексты интерфейса
    START_MESSAGE = """📋 *АЛГОРИТМ:*

*1. Подготовка*
   • Собери факты (данные, отчеты).
   • Четко определи цель разговора.

*2. Начало беседы*
   • Проведи разговор наедине.
   • Создай доверительную атмосферу («Как дела?»).

*3. ПРОВЕДИ БЕСЕДУ ПО АЛГОРИТМУ ПРОВД:*
   • *Поведение.* Опиши факты: «Александр, в документах на отгрузку неверные данные».
   • *Результат.* Объясни последствия: «Исправление ошибки привело к увеличению сроков отгрузки».
   • *Отношение.* Вырази свое отношение: «Меня беспокоит эта ситуация».
   • *Вопрос.* Выслушай сторону коллеги: «Расскажи, как ты видишь ситуацию?».
   • *Договоренности.* Совместно найди решение: «Перед отправкой документов проверять данные».

*4. Завершение*
   • Закрепи договоренности письменно.
   • Заверши на позитиве: «Спасибо, что выслушал, давай будем на связи».
"""
    
    AUDIO_PROMPT_MESSAGE = """🎤 *Запиши аудио* (справа внизу) и наговори, что ты скажешь Александру. 
Если записать аудио сейчас не удобно, напечатай текст твоего сообщения.

📊 Для завершения диалога нажми на кнопку *"ПОЛУЧИТЬ АНАЛИЗ"* (кнопка внизу). 
💡 Я тоже могу завершить диалог, когда у меня будет достаточно информации для детального анализа.
"""
    
    STOP_MESSAGE = "✅ *Беседа с Александром завершена!* Надеюсь, удалось найти общий язык."
    
    # Сообщения о завершении диалога
    COMPLETION_ALL_PROVD = "✅ *Отлично!* Все ключевые аспекты диалога затронуты. Анализируем результат..."
    COMPLETION_MAX_TURNS = "⏱️ *Беседа завершена!* Ты провел {max_turns} реплик с Александром. Посмотрим, как прошел разговор..."
    
    # Сообщения об ошибках
    ERROR_AI_REQUEST = "🤖 *Александр временно недоступен.* Попробуй позже или начни заново."
    ERROR_DIALOGUE_REVIEW = "⚠️ *Не удалось проанализировать беседу:* {error_message}. Попробуй новый диалог."
    ERROR_SHORT_DIALOGUE = "📝 *Беседа слишком короткая* для полноценного анализа. Попробуй поговорить с Александром подольше."
    
    # Сообщение после завершения рецензирования
    AFTER_REVIEW_MESSAGE = """🎓 *Обратная связь получена!*

🔍 Проанализируй рекомендации выше — они помогут тебе лучше общаться с коллегами.

🔄 *Попробуем еще раз?* Нажми «Начать заново»!"""
    
    # Промпт для пользователя
    USER_PROMPT_TEMPLATE = """Коллега сказал:
"{user_message}"
"""
    
    # Промпт для рецензента
    REVIEWER_PROMPT_TEMPLATE = """ДИАЛОГ ДЛЯ ОЦЕНКИ:
{dialogue_text}

---
ТВОЯ ЗАДАЧА:
Проанализируй поведение коллеги в этом диалоге обратной связи. Ответ ДОЛЖЕН БЫТЬ СТРОГО В ФОРМАТЕ JSON.

Формат:
{{
  "overall": "Твой общий вывод в одном предложении",
  "goodPoints": [
    "Положительный момент 1",
    "Положительный момент 2"
  ],
  "improvementPoints": [
    "Что можно улучшить 1",
    "Что можно улучшить 2"
  ]
}}

- В "goodPoints" укажи, какие принципы горизонтальной коммуникации были соблюдены.
- В "improvementPoints" — чего не хватило для эффективного диалога с коллегой. Если всё хорошо, верни пустой массив [].
- Не пиши никакого текста вне JSON. Только валидный JSON-объект.
- Обращайся на "ты" к участнику диалога."""
    
    # Заголовки для финального отзыва
    REVIEW_TITLE = "🎓 *АНАЛИЗ ДИАЛОГА С КОЛЛЕГОЙ*\n"
    REVIEW_OVERALL_LABEL = "📋 *Общая оценка:* {overall}\n"
    REVIEW_GOOD_POINTS_LABEL = "✅ *Что получилось хорошо:*"
    REVIEW_IMPROVEMENT_LABEL = "💡 *Что можно улучшить:*"
    REVIEW_RESTART_MESSAGE = "Хочешь пройти ещё раз — нажми «Начать заново», или вернись в меню."
    
    # Лейблы для анализа ПРОВД
    PROVD_LABELS = {
        "Behavior": "П - Поведение",
        "Result": "Р - Результат", 
        "Emotion": "О - Отношение",
        "Question": "В - Вопрос",
        "Agreement": "Д - Договорённости"
    }
    
    # Эмодзи для отображения
    COLLEAGUE_EMOJI = "👥"
    ANALYSIS_EMOJI = "📊"
    PROGRESS_EMOJI = "📊"
    
    # Флаги поведения
    SHOW_PROGRESS_INFO = False
    
    # Fallback значения
    FALLBACK_REPLY_TEXT = "(пустой ответ)"
    
    @classmethod
    def get_user_prompt(cls, user_message: str) -> str:
        """Формирует промпт для обработки сообщения пользователя."""
        escaped_message = user_message.replace('\\', '\\\\').replace('"', '\\"')
        return cls.USER_PROMPT_TEMPLATE.format(user_message=escaped_message)
    
    @classmethod
    def get_reviewer_prompt(cls, dialogue_text: str) -> str:
        """Формирует промпт для рецензента-агента."""
        escaped_dialogue = dialogue_text.replace('\\', '\\\\').replace('"', '\\"')
        return cls.REVIEWER_PROMPT_TEMPLATE.format(dialogue_text=escaped_dialogue)
    
    @classmethod
    def get_start_message(cls) -> str:
        """Получает стартовое сообщение с подставленными параметрами."""
        return cls.START_MESSAGE.format(max_turns=cls.MAX_DIALOGUE_TURNS)
    
    @classmethod
    def get_completion_max_turns_message(cls) -> str:
        """Получает сообщение о завершении по лимиту ходов."""
        return cls.COMPLETION_MAX_TURNS.format(max_turns=cls.MAX_DIALOGUE_TURNS)


