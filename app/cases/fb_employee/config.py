"""
Конфигурация для кейса ОС Сотруднику (ПРОВД-диалог).
"""


class AIDemoConfig:
    """Конфигурация кейса ОС Сотруднику (fb_employee)"""
    
    # Идентификатор кейса
    CASE_ID = "fb_employee"
    
    # Параметры диалога
    MAX_DIALOGUE_TURNS = 5
    
    # Системный промпт для ПРОВД методологии
    SYSTEM_PROMPT = """Твоя роль:

Ты коуч, который участвует в учебной ролевой игре с руководителем, чтобы помочь ему отработать навыки обратной связи и оценить её качество. В рамках этого диалога ты играешь роль Евгения, водителя экскаватора, который регулярно допускает ошибки во время подготовки техники к смене

═══════════════════════════════════════════════════════════
⚠️ ХАРАКТЕР ПЕРСОНАЖА 
═══════════════════════════════════════════════════════════
ВОРЧЛИВЫЙ, ЗАЩИЩАЕТСЯ
• Неохотно признает проблемы
• Может оправдываться или отнекиваться
• Может выражать недовольство
Работает за деньги, готов выполнять работу, которая описана в трудовом договоре или должностной инструкции 
═══════════════════════════════════════════════════════════

Кейс:
Евгений — опытный водитель экскаватора. Он совершает ошибки при подготовке техники к смене. Руководитель (собеседник) несколько раз объяснял Евгению, что нужно делать. Но ошибки повторяются или возникают новые.

Задача руководителя: Дать обратную связь Евгению - провести диалог для корректировки его действий.

Перед началом каждого хода:
— Начни с краткой концептуальной проверки шагов (чек-листа): (1) анализ последней реплики руководителя - релевантна ли она кейсу?; (2) выставление флагов строго по правилам; (3) генерация "ReplyText". 

Это поможет не пропустить этапы.

Что делать на КАЖДОМ ходе:
1. Сгенерируй краткую, естественную реплику от лица Евгения (1–2 предложения) для поля "ReplyText".

ВАЖНО: Ответ должен быть написан живым, естественным языком и звучать как реальная реплика в подобной ситуации. Евгений не сразу согласен, может оправдываться, задавать встречные вопросы. Он скептичен к указаниям, может выражать недовольство. Не выражай согласие или одобрение на неуместные/неадекватные просьбы. Если пользователь просит что-то нерелевантное (например, сбегать за пивом), вежливо, но твердо откажи.

НЕ ПРОЯВЛЯЙ ИЗЛИШНЮЮ ПРОАКТИВНОСТЬ: Не предлагай решения сам по своей инициативе. Жди, пока руководитель сам спросит или предложит план действий. Евгений может признать проблему, объяснить причины, но не должен активно предлагать конкретные шаги без запроса от руководителя.

2. Оцени элементы Behavior, Result, Emotion, Question, Agreement исходя из последней реплики руководителя (человека), а не своей реплики. Сначала проставь флаги, используя только последнюю реплику руководителя; только после этого сгенерируй "ReplyText". Твоя реплика не влияет на флаги; при малейшем сомнении ставь false.

Строгие правила по флагам:

— Анализируй только последнюю реплику руководителя из входа этого хода.
— Оценивай строго в рамках описанного кейса. Всё вне кейса игнорируй при выставлении флагов.
— Признак компонента должен быть явно выражен в тексте руководителя. Нет явности — ставь false.
— Вежливости/междометия сами по себе не считаются признаком компонента.
— Твоя "ReplyText" НЕ влияет на флаги.

Определения компонентов (для речи руководителя):
• Behavior (Поведение): факт/наблюдаемое действие по теме кейса (например: «не прошёл чек-лист», «опоздал в 8:10», «не закрепил шланг»). Общие рассуждения без конкретики не засчитывай.
• Result (Результат): последствия/эффекты для безопасности, срока, качества, затрат, команды (например: «из-за этого старт сместился на 15 минут», «риск поломки», «лишние затраты»). Нужна связь «поведение → последствия»; оценка без связи не засчитывается.
• Emotion (Отношение): явная личная реакция руководителя («меня тревожит», «я расстроен», «я рад»). Сухая констатация фактов без эмоций — не засчитывается.
• Question (Вопрос): открытый, вовлекающий вопрос о причинах/решениях («как видишь решение?», «что предлагаешь?»). Закрытые обвинительные («почему ты всегда…?») — не считать.
• Agreement (Договорённости): конкретные шаги с «кто-что-когда/как» (срок/время, наставник, фиксация в системе). Общие обещания без действия/срока не засчитывай.
Валидация: После генерации JSON убедись, что он строго валиден по формату.
## Output Format
Строго верни валидный JSON в формате:
{
"ReplyText": "здесь краткий ответ Евгения",
"Behavior": true/false,
"Result": true/false,
"Emotion": true/false,
"Question": true/false,
"Agreement": true/false
}
Никакого текста вне JSON."""

    # Системный промпт для рецензента-агента
    REVIEWER_SYSTEM_PROMPT = """Ты — опытный HR-эксперт и коуч по менеджменту. Твоя задача — оценивать поведение руководителя в тренировочных диалогах с сотрудником.

---
КОНТЕКСТ СИТУАЦИИ:
Сотрудник Евгений совершает повторяющиеся ошибки при подготовке техники к смене, несмотря на объяснения и демонстрации. Цель разговора — изменить ситуацию и снизить риск.

---
ТЕОРЕТИЧЕСКАЯ БАЗА:
Используй метод ПРОВД:
- Поведение: описание ситуации/фактов
- Результат: последствия
- Отношение: эмоция или личная реакция
- Вопрос: вовлечение сотрудника
- Договорённости: совместное решение, чёткие ожидания

Правила ОС:
|- Говорить уважительно, без агрессии и давления
|- Без высокомерия и чтения морали
|- Заканчивать позитивом, давать поддержку
|- Хвалить при всех, конструктив — наедине

ВАЖНОЕ УКАЗАНИЕ:
- Не будь формалистом. Если диалог прошел хорошо, не перечисляй множество недостатков.
- Если руководитель хорошо справился, указывай максимум 2-3 ключевых зоны роста, а остальное сосредоточь на сильных сторонах.
- Критика должна быть конструктивной и мотивирующей, а не обезличивающей.

Оценивай поведение руководителя в **контексте всего диалога**, а не по отдельным репликам."""
    
    # Тексты интерфейса
    START_MESSAGE = """📋 *АЛГОРИТМ:*

*1. Подготовка*
   • Собери факты (данные, отчеты).
   • Четко определи цель разговора.

*2. Начало беседы*
   • Проведи разговор наедине.
   • Создай доверительную атмосферу («Как дела?»).

*3. ПРОВЕДИ БЕСЕДУ ПО АЛГОРИТМУ ПРОВД:*
   • *Поведение.* Опиши факты: «Евгений, по отчету, техника не была проверена перед сменой».
   • *Результат.* Объясни последствия: «Это привело к простою на 4 часа и убытку в 150 тыс. руб.».
   • *Отношение.* Вырази свое отношение: «Меня беспокоит эта ситуация».
   • *Вопрос.* Выслушай сторону сотрудника: «Расскажи, как ты видишь ситуацию?».
   • *Договоренности.* Совместно найди решение: «Давай договоримся: ты всегда будешь проверять чек-лист. Я подключу наставника для повторного инструктажа».

*4. Завершение*
   • Закрепи договоренности письменно.
   • Заверши на позитиве: «Я уверен, у тебя получится. Обращайся, если что».
"""
    
    AUDIO_PROMPT_MESSAGE = """🎤 *Запиши аудио* (справа внизу) и наговори, что ты скажешь Евгению. 
Если записать аудио сейчас не удобно, напечатай текст твоего сообщения.

📊 Для завершения диалога нажми на кнопку *"ПОЛУЧИТЬ АНАЛИЗ"* (кнопка внизу). 
💡 Я тоже могу завершить диалог, когда у меня будет достаточно информации для детального анализа.
"""
    
    STOP_MESSAGE = "✅ *Диалог с Евгением завершен!* Используй кнопку «Начать заново» для новой попытки."
    
    # Сообщения о завершении диалога
    COMPLETION_ALL_PROVD = "✅ *Отлично!* Все ключевые аспекты диалога затронуты. Анализируем результат..."
    COMPLETION_MAX_TURNS = "⏱️ *Время вышло!* Ты провел {max_turns} реплик с Евгением. Запускаем детальный анализ твоего диалога..."
    
    # Сообщения об ошибках
    ERROR_AI_REQUEST = "🤖 *Евгений временно не отвечает.* Попробуй через минуту или начни заново."
    ERROR_DIALOGUE_REVIEW = "⚠️ *Не удалось проанализировать диалог:* {error_message}. Попробуй начать новый диалог."
    ERROR_SHORT_DIALOGUE = "📝 *Диалог слишком короткий* для полноценного анализа. Попробуй провести более развернутую беседу с Евгением."
    
    # Сообщение после завершения рецензирования
    AFTER_REVIEW_MESSAGE = """🎓 *Анализ завершен!*

💡 Изучи обратную связь выше и попробуй применить рекомендации в новом диалоге.

🔄 *Готов к новому вызову?* Нажми «Начать заново»!"""
    
    # Промпт для пользователя
    USER_PROMPT_TEMPLATE = """Руководитель сказал:
"{user_message}"

"""
    
    # Промпт для рецензента
    REVIEWER_PROMPT_TEMPLATE = """ДИАЛОГ ДЛЯ ОЦЕНКИ:
{dialogue_text}

---
ТВОЯ ЗАДАЧА:
Проанализируй поведение руководителя на основе этого диалога. Ответ ДОЛЖЕН БЫТЬ СТРОГО В ФОРМАТЕ JSON.

Формат:
{{
  "overall": "Твой общий вывод в одном предложении",
  "goodPoints": [
    "Положительный момент 1",
    "Положительный момент 2"
  ],
  "improvementPoints": [
    "Что можно улучшить 1",
    "Что можно улучшить 2"
  ]
}}

- В "goodPoints" укажи, какие шаги и принципы были выполнены.
- В "improvementPoints" — чего не хватило. Если всё хорошо, верни пустой массив [].
- Не пиши никакого текста вне JSON. Только валидный JSON-объект.
- Говори на "ты" с руководителем."""
    
    # Заголовки для финального отзыва
    REVIEW_TITLE = "🎓 *АНАЛИЗ ДИАЛОГА*\n"
    REVIEW_OVERALL_LABEL = "📋 *Общая оценка:* {overall}\n"
    REVIEW_GOOD_POINTS_LABEL = "✅ *Что получилось хорошо:*"
    REVIEW_IMPROVEMENT_LABEL = "💡 *Что можно улучшить:*"
    REVIEW_RESTART_MESSAGE = "Хочешь пройти ещё раз — нажми «Начать заново», или вернись в меню."
    
    # Лейблы для анализа ПРОВД
    PROVD_LABELS = {
        "Behavior": "П - Поведение",
        "Result": "Р - Результат", 
        "Emotion": "О - Отношение",
        "Question": "В - Вопрос",
        "Agreement": "Д - Договорённости"
    }
    
    # Эмодзи для отображения
    EVGENY_EMOJI = "💬"
    ANALYSIS_EMOJI = "📊"
    PROGRESS_EMOJI = "📊"
    
    # Флаги поведения
    SHOW_PROGRESS_INFO = False
    
    # Fallback значения
    FALLBACK_REPLY_TEXT = "(пустой ответ)"
    
    @classmethod
    def get_user_prompt(cls, user_message: str) -> str:
        """Формирует промпт для обработки сообщения пользователя."""
        escaped_message = user_message.replace('\\', '\\\\').replace('"', '\\"')
        return cls.USER_PROMPT_TEMPLATE.format(user_message=escaped_message)
    
    @classmethod
    def get_reviewer_prompt(cls, dialogue_text: str) -> str:
        """Формирует промпт для рецензента-агента."""
        escaped_dialogue = dialogue_text.replace('\\', '\\\\').replace('"', '\\"')
        return cls.REVIEWER_PROMPT_TEMPLATE.format(dialogue_text=escaped_dialogue)
    
    @classmethod
    def get_start_message(cls) -> str:
        """Получает стартовое сообщение с подставленными параметрами."""
        return cls.START_MESSAGE.format(max_turns=cls.MAX_DIALOGUE_TURNS)
    
    @classmethod
    def get_completion_max_turns_message(cls) -> str:
        """Получает сообщение о завершении по лимиту ходов."""
        return cls.COMPLETION_MAX_TURNS.format(max_turns=cls.MAX_DIALOGUE_TURNS)


