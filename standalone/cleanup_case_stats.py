#!/usr/bin/env python3
"""
–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º case_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã case_stats.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python standalone/cleanup_case_stats.py ai_demo another_case
  python standalone/cleanup_case_stats.py --yes ai_demo another_case   # –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  python standalone/cleanup_case_stats.py --show ai_demo another_case  # —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ —É–¥–∞–ª–µ–Ω–∏—é
"""

import asyncio
import sys
import os
from pathlib import Path
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

import asyncpg
from dotenv import load_dotenv
from app.services.auth import normalize_db_url


load_dotenv()


def _get_database_url() -> str | None:
    return os.getenv("DATABASE_URL")


async def delete_case_stats(case_ids: List[str]) -> int:
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ case_stats –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö case_id. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫."""
    database_url = _get_database_url()
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return 0

    url = normalize_db_url(database_url)

    conn: asyncpg.Connection | None = None
    try:
        conn = await asyncpg.connect(url, timeout=10)

        # –ü–æ—Å—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        to_delete = await conn.fetchval(
            """
            SELECT COUNT(*)
            FROM case_stats
            WHERE case_id = ANY($1::text[])
            """,
            case_ids,
        )

        if to_delete == 0:
            print("‚ÑπÔ∏è  –ó–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0

        result = await conn.execute(
            """
            DELETE FROM case_stats
            WHERE case_id = ANY($1::text[])
            """,
            case_ids,
        )
        # asyncpg –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "DELETE <n>"
        deleted = int(result.split()[-1]) if result else 0
        return deleted
    finally:
        if conn:
            await conn.close()


async def count_case_stats(case_ids: List[str]) -> int:
    database_url = _get_database_url()
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return 0
    url = normalize_db_url(database_url)
    conn: asyncpg.Connection | None = None
    try:
        conn = await asyncpg.connect(url, timeout=10)
        return await conn.fetchval(
            """
            SELECT COUNT(*)
            FROM case_stats
            WHERE case_id = ANY($1::text[])
            """,
            case_ids,
        )
    finally:
        if conn:
            await conn.close()


def print_usage() -> None:
    print(
        """
–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º case_id –∏–∑ case_stats.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python standalone/cleanup_case_stats.py ai_demo another_case
  python standalone/cleanup_case_stats.py --yes ai_demo another_case   # –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  python standalone/cleanup_case_stats.py --show ai_demo another_case  # —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ —É–¥–∞–ª–µ–Ω–∏—é
""".strip()
    )


async def main() -> None:
    args = [a for a in sys.argv[1:] if a.strip()]
    if not args:
        print_usage()
        return

    confirm = True
    show_only = False
    if "--yes" in args:
        confirm = False
        args.remove("--yes")
    if "--show" in args:
        show_only = True
        args.remove("--show")

    case_ids = args
    if not case_ids:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã case_id")
        print_usage()
        return

    total = await count_case_stats(case_ids)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∫ —É–¥–∞–ª–µ–Ω–∏—é: {total}")
    if show_only or total == 0:
        return

    if confirm:
        answer = input(
            f"‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å {total} –∑–∞–ø–∏—Å–µ–π –∏–∑ case_stats –¥–ª—è case_id={case_ids}? (yes/no): "
        ).strip().lower()
        if answer != "yes":
            print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

    deleted = await delete_case_stats(case_ids)
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted}")


if __name__ == "__main__":
    asyncio.run(main())


