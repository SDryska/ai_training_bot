#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è.
–ë–µ–∑–æ–ø–∞—Å–µ–Ω - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API –∫–ª—é—á–∏ –∏ –Ω–µ –¥–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from app.services.validation_service import InputValidator, ValidationError
from app.config.settings import Settings

class InteractiveValidator:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.validator = InputValidator()
        self.settings = Settings()
        
    def print_config(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("‚öôÔ∏è  –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"   üìù –¢–µ–∫—Å—Ç: {self.settings.TEXT_MIN_LENGTH}-{self.settings.TEXT_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   üìù –°—Ç—Ä–æ–∫–∏: –º–∞–∫—Å–∏–º—É–º {self.settings.TEXT_MAX_LINES}")
        print(f"   üé§ –ê—É–¥–∏–æ: {self.settings.VOICE_MIN_DURATION_SEC}-{self.settings.VOICE_MAX_DURATION_SEC} —Å–µ–∫")
        print(f"   üé§ –†–∞–∑–º–µ—Ä: –º–∞–∫—Å–∏–º—É–º {self.settings.VOICE_MAX_SIZE_MB} –ú–ë")
        print(f"   ‚è∞ –õ–∏–º–∏—Ç: {self.settings.MAX_REQUESTS_PER_MINUTE}/–º–∏–Ω, {self.settings.MAX_REQUESTS_PER_HOUR}/—á–∞—Å")
        print()
    
    def test_text(self, text: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞"""
        try:
            result = self.validator.validate_text(text)
            print(f"‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç: '{result[:50]}{'...' if len(result) > 50 else ''}'")
            print(f"   –î–ª–∏–Ω–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –°—Ç—Ä–æ–∫: {len(result.split(chr(10)))}")
            return True
        except ValidationError as e:
            print(f"‚ùå –¢–µ–∫—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message}")
            print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {e.error_code}")
            return False
        except Exception as e:
            print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def test_voice_params(self, size_mb: float, duration_sec: float) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            size_bytes = int(size_mb * 1024 * 1024)
            self.validator.validate_voice_file(size_bytes, duration_sec)
            print(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –ø—Ä–∏–Ω—è—Ç: {size_mb}–ú–ë, {duration_sec}—Å–µ–∫")
            return True
        except ValidationError as e:
            print(f"‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message}")
            print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {e.error_code}")
            return False
        except Exception as e:
            print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def test_transcription(self, text: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            result = self.validator.validate_transcribed_text(text)
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞: '{result[:50]}{'...' if len(result) > 50 else ''}'")
            return True
        except ValidationError as e:
            print(f"‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {e.message}")
            print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {e.error_code}")
            return False
        except Exception as e:
            print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def run_interactive(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("üß™ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        print("=" * 55)
        print("üí° –ë–µ–∑–æ–ø–∞—Å–Ω–æ - –Ω–∏–∫–∞–∫–∏—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –¥–µ–ª–∞–µ—Ç—Å—è!")
        print("=" * 55)
        print()
        
        self.print_config()
        
        while True:
            print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞:")
            print("1. üìù –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
            print("2. üé§ –¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")  
            print("3. üìú –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
            print("4. ‚öôÔ∏è  –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("5. üö™ –í—ã—Ö–æ–¥")
            print()
            
            choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()
            print()
            
            if choice == "1":
                self.interactive_text_test()
            elif choice == "2":
                self.interactive_voice_test()
            elif choice == "3":
                self.interactive_transcription_test()
            elif choice == "4":
                self.print_config()
            elif choice == "5":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
            print("-" * 55)
    
    def interactive_text_test(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
        print("üìù –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞):")
        print()
        
        while True:
            text = input("–¢–µ–∫—Å—Ç: ")
            if text.lower() == "–Ω–∞–∑–∞–¥":
                break
            
            print()
            self.test_text(text)
            print()
            print("–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ '–Ω–∞–∑–∞–¥':")
    
    def interactive_voice_test(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        print("üé§ –¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")
        print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞–π–ª–∞ (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞):")
        print()
        
        while True:
            try:
                size_input = input("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë: ")
                if size_input.lower() == "–Ω–∞–∑–∞–¥":
                    break
                
                duration_input = input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: ")
                if duration_input.lower() == "–Ω–∞–∑–∞–¥":
                    break
                
                size_mb = float(size_input)
                duration_sec = float(duration_input)
                
                print()
                self.test_voice_params(size_mb, duration_sec)
                print()
                print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ '–Ω–∞–∑–∞–¥':")
                
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                print()
    
    def interactive_transcription_test(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        print("üìú –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        print("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞):")
        print("üí° –î–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ø–∞–º")
        print()
        
        while True:
            text = input("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è: ")
            if text.lower() == "–Ω–∞–∑–∞–¥":
                break
            
            print()
            self.test_transcription(text)
            print()
            print("–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∏–ª–∏ '–Ω–∞–∑–∞–¥':")

def run_predefined_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–±–æ—Ä –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üî¨ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print("=" * 40)
    
    validator = InteractiveValidator()
    
    test_cases = [
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        ("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", "text", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"),
        ("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", "text", ""),
        ("–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "text", "–ê" * 5000),
        ("–ú–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫", "text", "\n".join(["—Å—Ç—Ä–æ–∫–∞"] * 60)),
        ("–°–ø–∞–º —Å–∏–º–≤–æ–ª—ã", "text", "–∞" * 60),
        ("–≠–º–æ–¥–∑–∏", "text", "–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ –¥–µ–ª–∞? üéâ"),
        
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        ("–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å", "voice", (1.5, 30.0)),  # 1.5–ú–ë, 30—Å–µ–∫
        ("–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª", "voice", (30.0, 60.0)),     # 30–ú–ë, 60—Å–µ–∫
        ("–î–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ", "voice", (2.0, 400.0)),    # 2–ú–ë, 400—Å–µ–∫
        ("–ö–æ—Ä–æ—Ç–∫–æ–µ –∞—É–¥–∏–æ", "voice", (0.1, 0.1)),     # 0.1–ú–ë, 0.1—Å–µ–∫
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        ("–ß–∏—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", "transcription", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å"),
        ("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏", "transcription", "—ç—ç—ç... –Ω—É... —Ç–∏–ø–∞ —Ç–æ–≥–æ..."),
        ("–ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", "transcription", ""),
    ]
    
    passed = 0
    total = len(test_cases)
    
    for name, test_type, data in test_cases:
        print(f"\n–¢–µ—Å—Ç: {name}")
        
        if test_type == "text":
            result = validator.test_text(data)
        elif test_type == "voice":
            size_mb, duration_sec = data
            result = validator.test_voice_params(size_mb, duration_sec)
        elif test_type == "transcription":
            result = validator.test_transcription(data)
        else:
            result = False
        
        if result:
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total*100):.1f}%")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏
    os.environ.pop("OPENAI_API_KEY", None)
    os.environ.pop("BOT_TOKEN", None)
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("2. üî¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
    print()
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    print()
    
    if choice == "1":
        validator = InteractiveValidator()
        validator.run_interactive()
    elif choice == "2":
        run_predefined_tests()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
