#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π.
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
2. –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
3. –í–µ—Ä—Å–∏—é –º–∏–≥—Ä–∞—Ü–∏–π Alembic
4. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
5. –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python standalone/check_db_health.py
"""

import asyncio
import sys
import os
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

import asyncpg
from dotenv import load_dotenv
from app.services.auth import normalize_db_url

load_dotenv()


class DatabaseHealthChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    REQUIRED_TABLES = [
        'authorized_users',
        'bot_ratings',
        'case_stats',
        'rating_invites',
        'conversations',
        'fsm_storage',
        'alembic_version',
        'rating_comments',
    ]
    
    # –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
    EXPECTED_COLUMNS = {
        'authorized_users': ['user_id', 'role', 'created_at'],
        'bot_ratings': ['user_id', 'question', 'rating', 'updated_at'],
        'case_stats': ['user_id', 'case_id', 'stat', 'cnt', 'updated_at'],
        'conversations': ['id', 'user_id', 'provider_type', 'role', 'content', 'created_at'],
        'fsm_storage': ['storage_key', 'user_id', 'chat_id', 'state', 'data', 'updated_at'],
        'alembic_version': ['version_num'],
    }
    
    def __init__(self):
        self.conn = None
        self.errors = []
        self.warnings = []
        self.success = []
    
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î."""
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            self.errors.append("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env")
            return False
        
        try:
            url = normalize_db_url(database_url)
            print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
            self.conn = await asyncpg.connect(url, timeout=10)
            self.success.append("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except asyncpg.PostgresConnectionError as e:
            self.errors.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}")
            return False
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def check_tables_exist(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü."""
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü...")
        
        query = """
        SELECT tablename 
        FROM pg_tables 
        WHERE schemaname = 'public'
        ORDER BY tablename
        """
        
        try:
            rows = await self.conn.fetch(query)
            existing_tables = [row['tablename'] for row in rows]
            
            missing_tables = []
            for table in self.REQUIRED_TABLES:
                if table in existing_tables:
                    self.success.append(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    missing_tables.append(table)
                    self.errors.append(f"  ‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table}' –ù–ï –ù–ê–ô–î–ï–ù–ê")
            
            if missing_tables:
                self.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
                return False
            
            self.success.append(f"‚úÖ –í—Å–µ {len(self.REQUIRED_TABLES)} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω—ã")
            return True
            
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    async def check_alembic_version(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π Alembic."""
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        try:
            query = "SELECT version_num FROM alembic_version"
            rows = await self.conn.fetch(query)
            
            if not rows:
                self.errors.append("‚ùå –¢–∞–±–ª–∏—Ü–∞ alembic_version –ø—É—Å—Ç–∞ - –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
                return False
            
            version = rows[0]['version_num']
            self.success.append(f"‚úÖ –í–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {version}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º–∞—è –ø–µ—Ä–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è)
            if len(version) < 12:
                self.warnings.append(f"‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {version}")
            
            return True
            
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏: {e}")
            return False
    
    async def check_table_structure(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü."""
        print(f"\nüèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...")
        
        all_ok = True
        
        for table_name, expected_columns in self.EXPECTED_COLUMNS.items():
            try:
                query = """
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_schema = 'public' AND table_name = $1
                ORDER BY ordinal_position
                """
                
                rows = await self.conn.fetch(query, table_name)
                existing_columns = [row['column_name'] for row in rows]
                
                missing_columns = [col for col in expected_columns if col not in existing_columns]
                
                if missing_columns:
                    self.errors.append(f"  ‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}': –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏ {missing_columns}")
                    all_ok = False
                else:
                    self.success.append(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}': —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    
            except Exception as e:
                self.errors.append(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '{table_name}': {e}")
                all_ok = False
        
        if all_ok:
            self.success.append("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        return all_ok
    
    async def check_basic_operations(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î."""
        print(f"\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è
            count = await self.conn.fetchval("SELECT COUNT(*) FROM authorized_users")
            self.success.append(f"  ‚úÖ –ß—Ç–µ–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –æ—Ç–∫–∞—Ç–æ–º)
            async with self.conn.transaction():
                test_user_id = 999999999
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–æ–ª—å 'user' (–µ—Å—Ç—å CHECK constraint –Ω–∞ —Ä–æ–ª—å)
                await self.conn.execute(
                    "INSERT INTO authorized_users (user_id, role) VALUES ($1, $2) ON CONFLICT DO NOTHING",
                    test_user_id, 'user'
                )
                # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∑–∞–ø–∏—Å—å –ø–æ—è–≤–∏–ª–∞—Å—å
                exists = await self.conn.fetchval(
                    "SELECT EXISTS(SELECT 1 FROM authorized_users WHERE user_id = $1)",
                    test_user_id
                )
                if exists:
                    self.success.append("  ‚úÖ –ó–∞–ø–∏—Å—å: —Ç–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                else:
                    self.warnings.append("  ‚ö†Ô∏è  –ó–∞–ø–∏—Å—å: —Ç–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                
                # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
                raise Exception("Test rollback")
                
        except Exception as e:
            if "Test rollback" in str(e):
                self.success.append("  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –æ—Ç–∫–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                self.errors.append(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
                return False
        
        self.success.append("‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    
    async def check_indexes(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤."""
        print(f"\nüìá –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        try:
            query = """
            SELECT 
                schemaname,
                tablename,
                indexname,
                indexdef
            FROM pg_indexes
            WHERE schemaname = 'public'
            ORDER BY tablename, indexname
            """
            
            rows = await self.conn.fetch(query)
            
            if not rows:
                self.warnings.append("‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π –ë–î)")
                return True
            
            index_count = len(rows)
            self.success.append(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {index_count}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
            tables_with_indexes = {}
            for row in rows:
                table = row['tablename']
                if table not in tables_with_indexes:
                    tables_with_indexes[table] = []
                tables_with_indexes[table].append(row['indexname'])
            
            for table, indexes in tables_with_indexes.items():
                self.success.append(f"  ‚úÖ {table}: {len(indexes)} –∏–Ω–¥–µ–∫—Å–æ–≤")
            
            return True
            
        except Exception as e:
            self.warnings.append(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    async def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        if self.conn:
            await self.conn.close()
            print(f"\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    def print_report(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
        print("\n" + "="*70)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –û –ó–î–û–†–û–í–¨–ï –ë–î")
        print("="*70)
        
        if self.success:
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–û ({len(self.success)}):")
            for msg in self.success:
                print(f"   {msg}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for msg in self.warnings:
                print(f"   {msg}")
        
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for msg in self.errors:
                print(f"   {msg}")
        
        print("\n" + "="*70)
        
        if self.errors:
            print("üî¥ –°–¢–ê–¢–£–°: –ë–î –ù–ï –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï")
            print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
            return False
        elif self.warnings:
            print("üü° –°–¢–ê–¢–£–°: –ë–î –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            return True
        else:
            print("üü¢ –°–¢–ê–¢–£–°: –ë–î –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–ù–ê")
            print("   –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
    
    async def run_all_checks(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫."""
        try:
            if not await self.connect():
                return False
            
            checks = [
                self.check_tables_exist(),
                self.check_alembic_version(),
                self.check_table_structure(),
                self.check_basic_operations(),
                self.check_indexes(),
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            for check in checks:
                await check
            
            return True
            
        except Exception as e:
            self.errors.append(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            await self.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –ë–î - EMCO Assessment Bot")
    print("="*70)
    
    checker = DatabaseHealthChecker()
    await checker.run_all_checks()
    is_healthy = checker.print_report()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if is_healthy else 1)


if __name__ == "__main__":
    asyncio.run(main())

