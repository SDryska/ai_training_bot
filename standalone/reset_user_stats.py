#!/usr/bin/env python3
"""
–°–ª—É–∂–µ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–æ—Å–∞ –¥–ª—è "–Ω–æ–≤—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python reset_user_stats.py <user_id>
    python reset_user_stats.py --all  # –°–±—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–û–°–¢–û–†–û–ñ–ù–û!)

–ü—Ä–∏–º–µ—Ä—ã:
    python reset_user_stats.py 123456789
    python reset_user_stats.py --all
"""

import asyncio
import sys
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

import asyncpg
from app.config.settings import Settings
from app.services.auth import normalize_db_url


async def reset_user_stats(user_id: Optional[int] = None, reset_all: bool = False) -> None:
    """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    settings = Settings()
    
    if not settings.DATABASE_URL:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    url = normalize_db_url(settings.DATABASE_URL)
    
    try:
        conn = await asyncpg.connect(url, timeout=10)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return
    
    try:
        if reset_all:
            print("üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–µ–π—Å–æ–≤
            result1 = await conn.execute("DELETE FROM case_stats")
            print(f"   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π case_stats: {result1.split()[-1]}")
            
            # –°–±—Ä–æ—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∫ –æ–ø—Ä–æ—Å—É
            result2 = await conn.execute("DELETE FROM rating_invites") 
            print(f"   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π rating_invites: {result2.split()[-1]}")
            
            # –°–±—Ä–æ—Å –æ—Ü–µ–Ω–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            # result3 = await conn.execute("DELETE FROM bot_ratings")
            # print(f"   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π bot_ratings: {result3.split()[-1]}")
            
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω–∞!")
            
        elif user_id:
            print(f"üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stats_count = await conn.fetchval(
                "SELECT COUNT(*) FROM case_stats WHERE user_id = $1", user_id
            )
            invite_exists = await conn.fetchval(
                "SELECT COUNT(*) FROM rating_invites WHERE user_id = $1", user_id
            )
            ratings_count = await conn.fetchval(
                "SELECT COUNT(*) FROM bot_ratings WHERE user_id = $1", user_id
            )
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π case_stats: {stats_count}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π rating_invites: {invite_exists}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π bot_ratings: {ratings_count}")
            
            if stats_count == 0 and invite_exists == 0 and ratings_count == 0:
                print("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–æ–≤—ã–π (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
                return
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–µ–π—Å–æ–≤
            result1 = await conn.execute(
                "DELETE FROM case_stats WHERE user_id = $1", user_id
            )
            print(f"   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π case_stats: {result1.split()[-1]}")
            
            # –°–±—Ä–æ—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∫ –æ–ø—Ä–æ—Å—É
            result2 = await conn.execute(
                "DELETE FROM rating_invites WHERE user_id = $1", user_id
            )
            print(f"   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π rating_invites: {result2.split()[-1]}")
            
            # –°–±—Ä–æ—Å –æ—Ü–µ–Ω–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            # result3 = await conn.execute(
            #     "DELETE FROM bot_ratings WHERE user_id = $1", user_id
            # )
            # print(f"   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π bot_ratings: {result3.split()[-1]}")
            
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–∞!")
            print("   –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ–ø—Ä–æ—Å—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞")
        
        else:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω user_id –∏–ª–∏ —Ñ–ª–∞–≥ --all")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        
    finally:
        await conn.close()


async def show_user_stats(user_id: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    settings = Settings()
    
    if not settings.DATABASE_URL:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    url = normalize_db_url(settings.DATABASE_URL)
    
    try:
        conn = await asyncpg.connect(url, timeout=10)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return
    
    try:
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ–π—Å–æ–≤
        case_stats = await conn.fetch(
            """
            SELECT case_id, stat, cnt, updated_at 
            FROM case_stats 
            WHERE user_id = $1 
            ORDER BY case_id, stat
            """, 
            user_id
        )
        
        if case_stats:
            print("\n   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ–π—Å–æ–≤:")
            for row in case_stats:
                print(f"     {row['case_id']}.{row['stat']}: {row['cnt']} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {row['updated_at']})")
        else:
            print("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ–π—Å–æ–≤: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫ –æ–ø—Ä–æ—Å—É
        invite = await conn.fetchrow(
            "SELECT sent_at FROM rating_invites WHERE user_id = $1", user_id
        )
        
        if invite:
            print(f"   –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ–ø—Ä–æ—Å—É: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {invite['sent_at']}")
        else:
            print("   –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ–ø—Ä–æ—Å—É: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å")
        
        # –û—Ü–µ–Ω–∫–∏
        ratings = await conn.fetch(
            "SELECT question, rating, updated_at FROM bot_ratings WHERE user_id = $1", user_id
        )
        
        if ratings:
            print("\n   –û—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞:")
            for row in ratings:
                print(f"     {row['question']}: {row['rating']}/10 (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {row['updated_at']})")
        else:
            print("   –û—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        
    finally:
        await conn.close()


def print_usage():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    print("""
–°–ª—É–∂–µ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python reset_user_stats.py <user_id>           # –°–±—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    python reset_user_stats.py --all               # –°–±—Ä–æ—Å –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–û–°–¢–û–†–û–ñ–ù–û!)
    python reset_user_stats.py --show <user_id>    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    python reset_user_stats.py --help              # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
    python reset_user_stats.py 123456789
    python reset_user_stats.py --show 123456789
    python reset_user_stats.py --all

–ß—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è:
    - –°—á–µ—Ç—á–∏–∫–∏ –∫–µ–π—Å–æ–≤ (started, completed, out_of_moves, auto_finished)
    - –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫ –æ–ø—Ä–æ—Å—É (—Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏)
    - –û—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ–ø—Ä–æ—Å—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞.
""")


async def main():
    if len(sys.argv) < 2:
        print_usage()
        return
    
    arg = sys.argv[1]
    
    if arg in ("--help", "-h"):
        print_usage()
        return
    
    if arg == "--all":
        response = input("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
        if response.lower() == "yes":
            await reset_user_stats(reset_all=True)
        else:
            print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    if arg == "--show":
        if len(sys.argv) < 3:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω user_id –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python reset_user_stats.py --show <user_id>")
            return
        
        try:
            user_id = int(sys.argv[2])
            await show_user_stats(user_id)
        except ValueError:
            print("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –û–±—ã—á–Ω—ã–π —Å–±—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_id = int(arg)
        await reset_user_stats(user_id=user_id)
    except ValueError:
        print("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        print_usage()


if __name__ == "__main__":
    asyncio.run(main())
