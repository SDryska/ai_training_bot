#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import asyncio
import sys
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

import asyncpg
from app.config.settings import Settings
from app.services.auth import normalize_db_url


class TestHelper:
    def __init__(self):
        self.settings = Settings()
        self.conn: Optional[asyncpg.Connection] = None
    
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if not self.settings.DATABASE_URL:
            print("‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return False
        
        url = normalize_db_url(self.settings.DATABASE_URL)
        
        try:
            self.conn = await asyncpg.connect(url, timeout=10)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if self.conn:
            await self.conn.close()
    
    async def find_users(self) -> list:
        """–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞–∫–æ–π-–ª–∏–±–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é."""
        if not self.conn:
            return []
        
        users = await self.conn.fetch("""
            SELECT DISTINCT user_id, 
                   (SELECT role FROM authorized_users WHERE user_id = u.user_id) as role,
                   (SELECT COUNT(*) FROM case_stats WHERE user_id = u.user_id AND stat = 'completed') as completed_cases,
                   (SELECT sent_at FROM rating_invites WHERE user_id = u.user_id) as invite_sent,
                   (SELECT COUNT(*) FROM bot_ratings WHERE user_id = u.user_id) as ratings_given
            FROM (
                SELECT user_id FROM case_stats
                UNION 
                SELECT user_id FROM rating_invites
                UNION 
                SELECT user_id FROM bot_ratings
                UNION
                SELECT user_id FROM authorized_users
            ) u
            ORDER BY user_id
        """)
        
        return users
    
    async def show_user_details(self, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        if not self.conn:
            return
        
        print(f"\nüìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        
        # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role = await self.conn.fetchval(
            "SELECT role FROM authorized_users WHERE user_id = $1", user_id
        )
        print(f"   –†–æ–ª—å: {role or '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ–π—Å–æ–≤
        case_stats = await self.conn.fetch("""
            SELECT case_id, stat, cnt, updated_at 
            FROM case_stats 
            WHERE user_id = $1 
            ORDER BY case_id, stat
        """, user_id)
        
        if case_stats:
            print("\n   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ–π—Å–æ–≤:")
            current_case = None
            for row in case_stats:
                if current_case != row['case_id']:
                    current_case = row['case_id']
                    print(f"     üéØ {current_case}:")
                print(f"       {row['stat']}: {row['cnt']} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {row['updated_at'].strftime('%Y-%m-%d %H:%M')})")
        else:
            print("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ–π—Å–æ–≤: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫ –æ–ø—Ä–æ—Å—É
        invite = await self.conn.fetchrow(
            "SELECT sent_at FROM rating_invites WHERE user_id = $1", user_id
        )
        
        if invite:
            print(f"\n   üìß –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ–ø—Ä–æ—Å—É: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {invite['sent_at'].strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            print("\n   üìß –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ–ø—Ä–æ—Å—É: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å")
        
        # –û—Ü–µ–Ω–∫–∏
        ratings = await self.conn.fetch(
            "SELECT question, rating, updated_at FROM bot_ratings WHERE user_id = $1 ORDER BY updated_at", user_id
        )
        
        if ratings:
            print("\n   ‚≠ê –û—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞:")
            for row in ratings:
                print(f"     {row['question']}: {row['rating']}/10 (–¥–∞—Ç–∞: {row['updated_at'].strftime('%Y-%m-%d %H:%M')})")
        else:
            print("\n   ‚≠ê –û—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    async def reset_user(self, user_id: int, include_ratings: bool = False):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if not self.conn:
            return
        
        print(f"üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–µ–π—Å–æ–≤
        result1 = await self.conn.execute(
            "DELETE FROM case_stats WHERE user_id = $1", user_id
        )
        deleted_stats = int(result1.split()[-1])
        
        # –°–±—Ä–æ—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∫ –æ–ø—Ä–æ—Å—É
        result2 = await self.conn.execute(
            "DELETE FROM rating_invites WHERE user_id = $1", user_id
        )
        deleted_invites = int(result2.split()[-1])
        
        deleted_ratings = 0
        if include_ratings:
            # –°–±—Ä–æ—Å –æ—Ü–µ–Ω–æ–∫
            result3 = await self.conn.execute(
                "DELETE FROM bot_ratings WHERE user_id = $1", user_id
            )
            deleted_ratings = int(result3.split()[-1])
        
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π case_stats: {deleted_stats}")
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π rating_invites: {deleted_invites}")
        if include_ratings:
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π bot_ratings: {deleted_ratings}")
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–æ–≤—ã–π!")
    
    async def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        while True:
            print("\n" + "="*50)
            print("ü§ñ –¢–ï–°–¢–û–í–´–ô –ü–û–ú–û–©–ù–ò–ö –î–õ–Ø –ë–û–¢–ê EMCO")
            print("="*50)
            print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("2. –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            print("3. –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("4. –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –æ—Ü–µ–Ω–∫–∏)")
            print("5. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–ø—Ä–æ—Å—É")
            print("0. –í—ã—Ö–æ–¥")
            print("="*50)
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): ").strip()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                await self.show_all_users()
            elif choice == "2":
                await self.show_user_info()
            elif choice == "3":
                await self.reset_user_stats(include_ratings=False)
            elif choice == "4":
                await self.reset_user_stats(include_ratings=True)
            elif choice == "5":
                await self.show_survey_ready_users()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def show_all_users(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        users = await self.find_users()
        
        if not users:
            print("\nüì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print("-" * 80)
        print(f"{'ID':>12} | {'–†–æ–ª—å':>8} | {'–ó–∞–≤–µ—Ä—à–µ–Ω–æ':>10} | {'–û–ø—Ä–æ—Å':>15} | {'–û—Ü–µ–Ω–æ–∫':>7}")
        print("-" * 80)
        
        for user in users:
            user_id = user['user_id']
            role = user['role'] or '–Ω–µ—Ç'
            completed = user['completed_cases']
            invite_status = "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" if user['invite_sent'] else "–Ω–µ—Ç"
            ratings = user['ratings_given']
            
            print(f"{user_id:>12} | {role:>8} | {completed:>10} | {invite_status:>15} | {ratings:>7}")
    
    async def show_user_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        try:
            user_id = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip())
            await self.show_user_details(user_id)
        except ValueError:
            print("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    async def reset_user_stats(self, include_ratings: bool):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_id = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞: ").strip())
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.show_user_details(user_id)
            
            confirm = input(f"\n‚ö†Ô∏è  –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}? (yes/no): ").strip().lower()
            if confirm == "yes":
                await self.reset_user(user_id, include_ratings)
            else:
                print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        except ValueError:
            print("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    async def show_survey_ready_users(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–æ—Å."""
        if not self.conn:
            return
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –∫–µ–π—Å–∞–º–∏, –Ω–æ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        users = await self.conn.fetch("""
            SELECT cs.user_id, 
                   COUNT(DISTINCT cs.case_id) as completed_cases,
                   ri.sent_at as invite_sent
            FROM case_stats cs
            LEFT JOIN rating_invites ri ON cs.user_id = ri.user_id
            WHERE cs.stat = 'completed' AND cs.cnt > 0
            GROUP BY cs.user_id, ri.sent_at
            ORDER BY completed_cases DESC, cs.user_id
        """)
        
        ready_users = [u for u in users if not u['invite_sent']]
        already_invited = [u for u in users if u['invite_sent']]
        
        print(f"\nüéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –æ–ø—Ä–æ—Å—É: {len(ready_users)}")
        if ready_users:
            print("-" * 40)
            print(f"{'ID':>12} | {'–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–µ–π—Å–æ–≤':>15}")
            print("-" * 40)
            for user in ready_users:
                print(f"{user['user_id']:>12} | {user['completed_cases']:>15}")
        
        print(f"\nüìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É–∂–µ –ø–æ–ª—É—á–∏–≤—à–∏–µ –æ–ø—Ä–æ—Å: {len(already_invited)}")
        if already_invited:
            print("-" * 60)
            print(f"{'ID':>12} | {'–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–µ–π—Å–æ–≤':>15} | {'–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω':>20}")
            print("-" * 60)
            for user in already_invited:
                invite_date = user['invite_sent'].strftime('%Y-%m-%d %H:%M')
                print(f"{user['user_id']:>12} | {user['completed_cases']:>15} | {invite_date:>20}")


async def main():
    helper = TestHelper()
    
    if not await helper.connect():
        return
    
    try:
        await helper.show_menu()
    finally:
        await helper.disconnect()


if __name__ == "__main__":
    asyncio.run(main())
