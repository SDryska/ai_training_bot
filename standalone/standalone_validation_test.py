#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
–ù–ï —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞.
–ë–µ–∑–æ–ø–∞—Å–µ–Ω - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API –∫–ª—é—á–∏ –∏ –Ω–µ –¥–µ–ª–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã.
"""

import re
import sys
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Optional


class ValidationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    def __init__(self, message: str, error_code: str = "VALIDATION_ERROR"):
        self.message = message
        self.error_code = error_code
        super().__init__(message)


class MockSettings:
    """–ú–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    TEXT_MAX_LENGTH = 4000
    TEXT_MAX_LINES = 50
    TEXT_MIN_LENGTH = 1
    VOICE_MAX_SIZE_MB = 25.0
    VOICE_MAX_DURATION_SEC = 300
    VOICE_MIN_DURATION_SEC = 0.5
    MAX_REQUESTS_PER_MINUTE = 20
    MAX_REQUESTS_PER_HOUR = 100


class RateLimiter:
    """–ü—Ä–æ—Å—Ç–æ–π rate limiter –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.requests = defaultdict(list)  # user_id -> [timestamps]
    
    def check_rate_limit(self, user_id: int, max_per_minute: int, max_per_hour: int) -> Optional[int]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ OK, –∏–Ω–∞—á–µ —Å–µ–∫—É–Ω–¥—ã –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
        """
        now = datetime.now()
        user_requests = self.requests[user_id]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
        hour_ago = now - timedelta(hours=1)
        user_requests[:] = [req_time for req_time in user_requests if req_time > hour_ago]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞ —á–∞—Å
        if len(user_requests) >= max_per_hour:
            return 3600  # –ñ–¥–∞—Ç—å —á–∞—Å
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞ –º–∏–Ω—É—Ç—É
        minute_ago = now - timedelta(minutes=1)
        recent_requests = [req_time for req_time in user_requests if req_time > minute_ago]
        
        if len(recent_requests) >= max_per_minute:
            return 60  # –ñ–¥–∞—Ç—å –º–∏–Ω—É—Ç—É
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        user_requests.append(now)
        return None


class StandaloneValidator:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–ø–∞–º–∞/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    FORBIDDEN_PATTERNS = [
        r'(.)\1{50,}',                    # 50+ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥
        r'[^\w\s\.\,\!\?\-\:\;\(\)]{20,}', # 20+ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥
        r'^[\s\n\r\t]*$',                # —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    ]
    
    # –î—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    ERROR_MESSAGES = {
        "TEXT_TOO_LONG": "üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. {limit} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å.",
        "TEXT_TOO_SHORT": "üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ.",
        "TEXT_TOO_MANY_LINES": "üìù –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫ (–º–∞–∫—Å. {limit}). –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ.",
        "TEXT_EMPTY": "üìù –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.",
        "VOICE_TOO_LARGE": "üé§ –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. {limit}–ú–ë). –ó–∞–ø–∏—à–∏—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ.",
        "VOICE_TOO_LONG": "üé§ –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. {limit} —Å–µ–∫). –ó–∞–ø–∏—à–∏—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ.",
        "VOICE_TOO_SHORT": "üé§ –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ì–æ–≤–æ—Ä–∏—Ç–µ —á—É—Ç—å –¥–æ–ª—å—à–µ.",
        "CONTENT_SPAM": "üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        "RATE_LIMIT": "‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds} —Å–µ–∫—É–Ω–¥.",
        "TRANSCRIPTION_EMPTY": "üé§ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.",
    }
    
    def __init__(self):
        self.settings = MockSettings()
        self.rate_limiter = RateLimiter()
        self._compile_patterns()
    
    def _compile_patterns(self):
        """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.compiled_patterns = [re.compile(pattern) for pattern in self.FORBIDDEN_PATTERNS]
    
    def _check_rate_limit(self, user_id: int) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏"""
        wait_seconds = self.rate_limiter.check_rate_limit(
            user_id, 
            self.settings.MAX_REQUESTS_PER_MINUTE,
            self.settings.MAX_REQUESTS_PER_HOUR
        )
        
        if wait_seconds:
            raise ValidationError(
                self.ERROR_MESSAGES["RATE_LIMIT"].format(seconds=wait_seconds),
                "RATE_LIMIT"
            )
    
    def _check_forbidden_patterns(self, text: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        for pattern in self.compiled_patterns:
            if pattern.search(text):
                raise ValidationError(
                    self.ERROR_MESSAGES["CONTENT_SPAM"],
                    "CONTENT_SPAM"
                )
    
    def validate_text(self, text: str, check_patterns: bool = True) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."""
        if not text:
            raise ValidationError(
                self.ERROR_MESSAGES["TEXT_EMPTY"],
                "TEXT_EMPTY"
            )
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
        cleaned_text = text.strip()
        
        if not cleaned_text:
            raise ValidationError(
                self.ERROR_MESSAGES["TEXT_EMPTY"],
                "TEXT_EMPTY"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(cleaned_text) < self.settings.TEXT_MIN_LENGTH:
            raise ValidationError(
                self.ERROR_MESSAGES["TEXT_TOO_SHORT"],
                "TEXT_TOO_SHORT"
            )
        
        if len(cleaned_text) > self.settings.TEXT_MAX_LENGTH:
            raise ValidationError(
                self.ERROR_MESSAGES["TEXT_TOO_LONG"].format(limit=self.settings.TEXT_MAX_LENGTH),
                "TEXT_TOO_LONG"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        line_count = len(cleaned_text.split('\n'))
        if line_count > self.settings.TEXT_MAX_LINES:
            raise ValidationError(
                self.ERROR_MESSAGES["TEXT_TOO_MANY_LINES"].format(limit=self.settings.TEXT_MAX_LINES),
                "TEXT_TOO_MANY_LINES"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if check_patterns:
            self._check_forbidden_patterns(cleaned_text)
        
        return cleaned_text
    
    def validate_voice_file(self, file_size: int, duration: float) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        size_mb = file_size / (1024 * 1024)
        if size_mb > self.settings.VOICE_MAX_SIZE_MB:
            raise ValidationError(
                self.ERROR_MESSAGES["VOICE_TOO_LARGE"].format(limit=self.settings.VOICE_MAX_SIZE_MB),
                "VOICE_TOO_LARGE"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if duration > self.settings.VOICE_MAX_DURATION_SEC:
            raise ValidationError(
                self.ERROR_MESSAGES["VOICE_TOO_LONG"].format(limit=self.settings.VOICE_MAX_DURATION_SEC),
                "VOICE_TOO_LONG"
            )
        
        if duration < self.settings.VOICE_MIN_DURATION_SEC:
            raise ValidationError(
                self.ERROR_MESSAGES["VOICE_TOO_SHORT"],
                "VOICE_TOO_SHORT"
            )
    
    def validate_transcribed_text(self, text: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
        if not text or not text.strip():
            raise ValidationError(
                self.ERROR_MESSAGES["TRANSCRIPTION_EMPTY"],
                "TRANSCRIPTION_EMPTY"
            )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞, –Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ø–∞–º
        return self.validate_text(text, check_patterns=False)


class ValidationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.validator = StandaloneValidator()
        self.test_results = []
    
    def log_test(self, test_name: str, passed: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        self.test_results.append((test_name, passed))
        print(f"{status} {test_name}")
        if details:
            print(f"    {details}")
    
    def test_text_validation_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
        print("\nüî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        
        test_cases = [
            ("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", True),
            ("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", "", False),
            ("–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã", "   ", False),
            ("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "–ê" * 5000, False),
            ("–ú–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫", "\n".join(["—Å—Ç—Ä–æ–∫–∞"] * 60), False),
            ("–°–ø–∞–º —Å–∏–º–≤–æ–ª—ã", "–∞" * 60, False),
            ("–≠–º–æ–¥–∑–∏ —Ç–µ–∫—Å—Ç", "–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ –¥–µ–ª–∞?", True),
            ("–¢–µ–∫—Å—Ç —Å —á–∏—Å–ª–∞–º–∏", "–£ –º–µ–Ω—è 5 —è–±–ª–æ–∫ –∏ 3 –∞–ø–µ–ª—å—Å–∏–Ω–∞", True),
        ]
        
        for name, text, should_pass in test_cases:
            try:
                result = self.validator.validate_text(text)
                if should_pass:
                    self.log_test(name, True, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: '{result[:30]}{'...' if len(result) > 30 else ''}'")
                else:
                    self.log_test(name, False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
            except ValidationError as e:
                if not should_pass:
                    self.log_test(name, True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message[:60]}...")
                else:
                    self.log_test(name, False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e.message}")
            except Exception as e:
                self.log_test(name, False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def test_voice_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
        
        test_cases = [
            ("–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª", 1024 * 1024, 30.0, True),  # 1MB, 30 —Å–µ–∫
            ("–ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª", 1024, 1.0, True),  # 1KB, 1 —Å–µ–∫
            ("–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª", int(30 * 1024 * 1024), 60.0, False),  # 30MB, 60 —Å–µ–∫
            ("–î–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ", 1024 * 1024, 400.0, False),  # 1MB, 400 —Å–µ–∫
            ("–ö–æ—Ä–æ—Ç–∫–æ–µ –∞—É–¥–∏–æ", 1024, 0.1, False),  # 1KB, 0.1 —Å–µ–∫
            ("–ì—Ä–∞–Ω–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä", int(25 * 1024 * 1024), 60.0, True),  # —Ä–æ–≤–Ω–æ 25MB
            ("–ì—Ä–∞–Ω–∏—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 1024, 300.0, True),  # —Ä–æ–≤–Ω–æ 300 —Å–µ–∫
        ]
        
        for name, size, duration, should_pass in test_cases:
            try:
                self.validator.validate_voice_file(size, duration)
                if should_pass:
                    self.log_test(name, True, f"{size/(1024*1024):.1f}MB, {duration}—Å–µ–∫")
                else:
                    self.log_test(name, False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
            except ValidationError as e:
                if not should_pass:
                    self.log_test(name, True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message[:60]}...")
                else:
                    self.log_test(name, False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e.message}")
            except Exception as e:
                self.log_test(name, False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def test_transcription_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:")
        
        test_cases = [
            ("–ß–∏—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", True),
            ("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏", "—ç—ç—ç... –Ω—É... —Ç–∏–ø–∞ —Ç–æ–≥–æ...", True),
            ("–ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", "", False),
            ("–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã", "   ", False),
            ("–î–ª–∏–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", "–ê" * 5000, False),
            ("–ú–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫", "\n".join(["—Å–ª–æ–≤–æ"] * 60), False),
        ]
        
        for name, text, should_pass in test_cases:
            try:
                result = self.validator.validate_transcribed_text(text)
                if should_pass:
                    self.log_test(name, True, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: '{result[:30]}{'...' if len(result) > 30 else ''}'")
                else:
                    self.log_test(name, False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
            except ValidationError as e:
                if not should_pass:
                    self.log_test(name, True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {e.message[:60]}...")
                else:
                    self.log_test(name, False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e.message}")
            except Exception as e:
                self.log_test(name, False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def test_rate_limiting(self):
        """–¢–µ—Å—Ç rate limiting"""
        print("\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting:")
        
        user_id = 99999  # —Ç–µ—Å—Ç–æ–≤—ã–π ID
        
        # –¢–µ—Å—Ç: –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        rate_limited = False
        requests_made = 0
        try:
            for i in range(self.validator.settings.MAX_REQUESTS_PER_MINUTE + 5):
                self.validator._check_rate_limit(user_id)
                requests_made = i + 1
        except ValidationError as e:
            rate_limited = True
            self.log_test("Rate limiting per minute", True, 
                         f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ {requests_made} –∑–∞–ø—Ä–æ—Å–æ–≤: {e.message[:50]}...")
        
        if not rate_limited:
            self.log_test("Rate limiting per minute", False, 
                         f"Rate limit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å–ª–µ {requests_made} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:")
        
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        try:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
            result = self.validator.validate_text("–∞")
            self.log_test("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞", True, "1 —Å–∏–º–≤–æ–ª –ø—Ä–∏–Ω—è—Ç")
        except Exception as e:
            self.log_test("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞", False, str(e))
        
        try:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (–Ω–æ –Ω–µ —Å–ø–∞–º)
            max_text = ("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. " * 250)[:self.validator.settings.TEXT_MAX_LENGTH]
            result = self.validator.validate_text(max_text)
            self.log_test("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞", True, f"{len(result)} —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏–Ω—è—Ç–æ")
        except Exception as e:
            self.log_test("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞", False, str(e))
        
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –≥–æ–ª–æ—Å–∞
        try:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            self.validator.validate_voice_file(1024, self.validator.settings.VOICE_MIN_DURATION_SEC)
            self.log_test("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞", True, "0.5 —Å–µ–∫ –ø—Ä–∏–Ω—è—Ç–æ")
        except Exception as e:
            self.log_test("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–∞", False, str(e))
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        total_tests = len(self.test_results)
        passed_tests = sum(1 for _, passed in self.test_results if passed)
        failed_tests = total_tests - passed_tests
        
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –ü—Ä–æ—à–ª–æ: {passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: {failed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests*100):.1f}%")
        
        if failed_tests == 0:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –õ–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {failed_tests} –ø—Ä–æ–±–ª–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.")
        
        return failed_tests == 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    print("=" * 50)
    print("üí° –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ù–ï —Ç—Ä–µ–±—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞")
    print("üí° –ù–∏–∫–∞–∫–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ù–ï –¥–µ–ª–∞–µ—Ç—Å—è")
    print("üí° –í–∞—à–∏ –ª–∏–º–∏—Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
    print("=" * 50)
    
    tester = ValidationTester()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        tester.test_text_validation_basic()
        tester.test_voice_validation()
        tester.test_transcription_validation()
        tester.test_rate_limiting()
        tester.test_edge_cases()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        success = tester.print_summary()
        
        return 0 if success else 1
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return 2


if __name__ == "__main__":
    sys.exit(main())
