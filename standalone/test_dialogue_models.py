"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –≤–Ω–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞.

–ü–æ–∑–≤–æ–ª—è–µ—Ç:
- –í—ã–±—Ä–∞—Ç—å –∫–µ–π—Å (career_dialog, fb_employee, fb_peer)
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤—É—é –º–æ–¥–µ–ª—å (DIALOGUE_MODEL)
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞ (REVIEWER_MODEL)
- –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–µ–π

–ó–∞–ø—É—Å–∫:
    python standalone/test_dialogue_models.py
"""

import asyncio
import json
import logging
import sys
from pathlib import Path
from datetime import datetime
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.config.settings import Settings
from app.services.ai_service import initialize_ai_providers, get_ai_gateway
from app.providers.base import ProviderType

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∫–µ–π—Å–æ–≤
from app.cases.career_dialog.config import CareerDialogConfig, DIALOGUE_MODEL as CAREER_DIALOGUE_MODEL, REVIEWER_MODEL as CAREER_REVIEWER_MODEL
from app.cases.fb_employee.config import AIDemoConfig, DIALOGUE_MODEL as FB_EMPLOYEE_DIALOGUE_MODEL, REVIEWER_MODEL as FB_EMPLOYEE_REVIEWER_MODEL
from app.cases.fb_peer.config import FBPeerConfig, DIALOGUE_MODEL as FB_PEER_DIALOGUE_MODEL, REVIEWER_MODEL as FB_PEER_REVIEWER_MODEL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger(__name__)


class DialogueTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, case_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ–π—Å–∞.
        
        Args:
            case_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–µ–π—Å–∞ (career_dialog, fb_employee, fb_peer)
        """
        self.case_id = case_id
        self.config = self._get_config()
        self.dialogue_model = self._get_dialogue_model()
        self.reviewer_model = self._get_reviewer_model()
        self.dialogue_entries = []
        self.turn_count = 0
        self.components_achieved = set()
        self.ai_gateway = get_ai_gateway()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.log_file = project_root / "standalone" / f"dialogue_test_{case_id}_{timestamp}.log"
        self.log_file.parent.mkdir(exist_ok=True)
        
    def _get_config(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞"""
        configs = {
            "career_dialog": CareerDialogConfig,
            "fb_employee": AIDemoConfig,
            "fb_peer": FBPeerConfig,
        }
        if self.case_id not in configs:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ–π—Å: {self.case_id}. –î–æ—Å—Ç—É–ø–Ω—ã: {list(configs.keys())}")
        return configs[self.case_id]
    
    def _get_dialogue_model(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
        models = {
            "career_dialog": CAREER_DIALOGUE_MODEL,
            "fb_employee": FB_EMPLOYEE_DIALOGUE_MODEL,
            "fb_peer": FB_PEER_DIALOGUE_MODEL,
        }
        return models[self.case_id]
    
    def _get_reviewer_model(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞"""
        models = {
            "career_dialog": CAREER_REVIEWER_MODEL,
            "fb_employee": FB_EMPLOYEE_REVIEWER_MODEL,
            "fb_peer": FB_PEER_REVIEWER_MODEL,
        }
        return models[self.case_id]
    
    def _log(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
        logger.info(message)
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(f"{datetime.now().isoformat()} | {message}\n")
    
    def _log_separator(self, title: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        separator = "=" * 80
        if title:
            self._log(f"\n{separator}")
            self._log(f"  {title}")
            self._log(separator)
        else:
            self._log(separator)
    
    def _parse_ai_response(self, response_text: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å fallback"""
        try:
            start_idx = response_text.find('{')
            end_idx = response_text.rfind('}') + 1
            
            if start_idx != -1 and end_idx > start_idx:
                json_str = response_text[start_idx:end_idx]
                parsed = json.loads(json_str)
                
                if "ReplyText" in parsed:
                    return parsed
                    
        except (json.JSONDecodeError, ValueError) as e:
            self._log(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        
        # Fallback
        if self.case_id == "career_dialog":
            return {
                "ReplyText": response_text,
                "Aspirations": False,
                "Strengths": False,
                "Development": False,
                "Opportunities": False,
                "Plan": False
            }
        else:  # fb_employee –∏–ª–∏ fb_peer
            return {
                "ReplyText": response_text,
                "Behavior": False,
                "Result": False,
                "Emotion": False,
                "Question": False,
                "Agreement": False
            }
    
    def _parse_reviewer_response(self, response_text: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞"""
        try:
            start_idx = response_text.find('{')
            end_idx = response_text.rfind('}') + 1
            
            if start_idx != -1 and end_idx > start_idx:
                json_str = response_text[start_idx:end_idx]
                parsed = json.loads(json_str)
                
                if "overall" in parsed:
                    return parsed
                    
        except (json.JSONDecodeError, ValueError) as e:
            self._log(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞: {e}")
        
        return {
            "overall": response_text,
            "goodPoints": [],
            "improvementPoints": []
        }
    
    def _extract_dialogue_text(self) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞"""
        dialogue_lines = []
        for entry in self.dialogue_entries:
            role = entry.get("role", "")
            text = entry.get("text", "")
            if role and text:
                dialogue_lines.append(f"{role}: {text}")
        return "\n\n".join(dialogue_lines)
    
    async def send_user_message(self, user_text: str) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
        
        Args:
            user_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (parsed_response, raw_response, etc.)
        """
        self.turn_count += 1
        
        self._log_separator(f"–•–û–î #{self.turn_count}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        user_prompt = self.config.get_user_prompt(user_text)
        system_prompt = self.config.SYSTEM_PROMPT
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._log("\nüì• –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
        self._log(f"   –ú–æ–¥–µ–ª—å: {self.dialogue_model}")
        self._log(f"   User ID: 999999 (—Ç–µ—Å—Ç–æ–≤—ã–π)")
        self._log(f"\nüìù USER MESSAGE (–æ—Ä–∏–≥–∏–Ω–∞–ª):")
        self._log(f"   {user_text}")
        self._log(f"\nüìù USER PROMPT (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –º–æ–¥–µ–ª—å):")
        self._log(f"   {user_prompt}")
        self._log(f"\nüìù SYSTEM PROMPT:")
        for line in system_prompt.split('\n')[:10]:  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
            self._log(f"   {line}")
        self._log(f"   ... (–≤—Å–µ–≥–æ {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        self._log("\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI...")
        response = await self.ai_gateway.send_message(
            user_id=999999,  # –¢–µ—Å—Ç–æ–≤—ã–π ID
            message=user_prompt,
            system_prompt=system_prompt,
            provider_type=ProviderType.OPENAI,
            model_override=self.dialogue_model,
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç
        self._log("\nüì§ –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò (RAW):")
        if not response.success:
            self._log(f"   ‚ùå –û–®–ò–ë–ö–ê: {response.error}")
            return {
                "success": False,
                "error": response.error,
                "turn": self.turn_count
            }
        
        raw_content = response.content or "(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"
        self._log(f"   {raw_content}")
        
        # –ü–∞—Ä—Å–∏–º JSON
        parsed_response = self._parse_ai_response(raw_content)
        
        self._log("\nüìä –†–ê–°–ü–ê–†–°–ï–ù–ù–´–ô –û–¢–í–ï–¢:")
        self._log(f"   ReplyText: {parsed_response.get('ReplyText', 'N/A')}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._log("\nüéØ –§–õ–ê–ì–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
        if self.case_id == "career_dialog":
            components = ["Aspirations", "Strengths", "Development", "Opportunities", "Plan"]
            labels = self.config.CAREER_LABELS
        else:
            components = ["Behavior", "Result", "Emotion", "Question", "Agreement"]
            labels = self.config.PROVD_LABELS
        
        for key in components:
            value = parsed_response.get(key, False)
            status = "‚úÖ" if value else "‚ùå"
            label = labels.get(key, key)
            self._log(f"   {status} {label}: {value}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if value:
                self.components_achieved.add(key)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        if self.case_id == "career_dialog":
            user_role = "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
            ai_role = "–ú–∞–∫—Å–∏–º"
        elif self.case_id == "fb_employee":
            user_role = "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
            ai_role = "–ï–≤–≥–µ–Ω–∏–π"
        else:  # fb_peer
            user_role = "–ö–æ–ª–ª–µ–≥–∞"
            ai_role = "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"
        
        self.dialogue_entries.append({"role": user_role, "text": user_text})
        self.dialogue_entries.append({"role": ai_role, "text": parsed_response.get("ReplyText", "")})
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self._log(f"\nüìà –ü–†–û–ì–†–ï–°–°:")
        self._log(f"   –•–æ–¥: {self.turn_count}/{self.config.MAX_DIALOGUE_TURNS}")
        self._log(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(self.components_achieved)}/5")
        self._log(f"   –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã: {', '.join(sorted(self.components_achieved))}")
        
        return {
            "success": True,
            "turn": self.turn_count,
            "raw_response": raw_content,
            "parsed_response": parsed_response,
            "user_prompt": user_prompt,
            "system_prompt": system_prompt,
            "components_achieved": self.components_achieved.copy(),
            "all_components_achieved": len(self.components_achieved) >= 5,
            "max_turns_reached": self.turn_count >= self.config.MAX_DIALOGUE_TURNS
        }
    
    async def request_review(self) -> dict:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ —É —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞.
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self._log_separator("–ó–ê–ü–†–û–° –†–ï–¶–ï–ù–ó–ò–†–û–í–ê–ù–ò–Ø")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∏–∞–ª–æ–≥
        dialogue_text = self._extract_dialogue_text()
        
        if not dialogue_text.strip():
            self._log("‚ùå –î–∏–∞–ª–æ–≥ –ø—É—Å—Ç–æ–π, —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            return {
                "success": False,
                "error": "–î–∏–∞–ª–æ–≥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞
        reviewer_prompt = self.config.get_reviewer_prompt(dialogue_text)
        reviewer_system_prompt = self.config.REVIEWER_SYSTEM_PROMPT
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞
        self._log("\nüì• –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –†–ï–¶–ï–ù–ó–ï–ù–¢–ê:")
        self._log(f"   –ú–æ–¥–µ–ª—å: {self.reviewer_model}")
        self._log(f"   User ID: 1999999 (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç)")
        
        self._log(f"\nüìù –î–ò–ê–õ–û–ì –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:")
        for line in dialogue_text.split('\n')[:20]:  # –ü–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
            self._log(f"   {line}")
        if len(dialogue_text.split('\n')) > 20:
            self._log(f"   ... (–≤—Å–µ–≥–æ {len(dialogue_text.split(chr(10)))} —Å—Ç—Ä–æ–∫)")
        
        self._log(f"\nüìù REVIEWER PROMPT:")
        for line in reviewer_prompt.split('\n')[:15]:
            self._log(f"   {line}")
        self._log(f"   ... (–≤—Å–µ–≥–æ {len(reviewer_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        self._log(f"\nüìù REVIEWER SYSTEM PROMPT:")
        for line in reviewer_system_prompt.split('\n')[:10]:
            self._log(f"   {line}")
        self._log(f"   ... (–≤—Å–µ–≥–æ {len(reviewer_system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞
        self.ai_gateway.clear_conversation(1999999)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        self._log("\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç—É...")
        response = await self.ai_gateway.send_message(
            user_id=1999999,
            message=reviewer_prompt,
            system_prompt=reviewer_system_prompt,
            provider_type=ProviderType.OPENAI,
            model_override=self.reviewer_model
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞
        self._log("\nüì§ –û–¢–í–ï–¢ –†–ï–¶–ï–ù–ó–ï–ù–¢–ê (RAW):")
        if not response.success:
            self._log(f"   ‚ùå –û–®–ò–ë–ö–ê: {response.error}")
            return {
                "success": False,
                "error": response.error
            }
        
        raw_content = response.content or "(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"
        self._log(f"   {raw_content}")
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞
        parsed_review = self._parse_reviewer_response(raw_content)
        
        self._log("\nüìä –†–ê–°–ü–ê–†–°–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        self._log(f"   Overall: {parsed_review.get('overall', 'N/A')}")
        
        good_points = parsed_review.get("goodPoints", [])
        if good_points:
            self._log(f"\n   ‚úÖ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ:")
            for i, point in enumerate(good_points, 1):
                self._log(f"      {i}. {point}")
        
        improvement_points = parsed_review.get("improvementPoints", [])
        if improvement_points:
            self._log(f"\n   üí° –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:")
            for i, point in enumerate(improvement_points, 1):
                self._log(f"      {i}. {point}")
        
        return {
            "success": True,
            "raw_response": raw_content,
            "parsed_review": parsed_review,
            "reviewer_prompt": reviewer_prompt,
            "dialogue_text": dialogue_text
        }
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ –¥–∏–∞–ª–æ–≥—É"""
        self._log_separator("–ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
        self._log(f"üìä –ö–µ–π—Å: {self.case_id}")
        self._log(f"üìä –í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: {self.turn_count}")
        self._log(f"üìä –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(self.components_achieved)}/5")
        self._log(f"üìä –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {', '.join(sorted(self.components_achieved)) if self.components_achieved else '–Ω–µ—Ç'}")
        self._log(f"üìä –õ–æ–≥-—Ñ–∞–π–ª: {self.log_file}")
        self._log_separator()


async def interactive_test(case_id: str):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏.
    
    Args:
        case_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–µ–π—Å–∞
    """
    print("\n" + "=" * 80)
    print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ò–ê–õ–û–ì–û–í–û–ô –ú–û–î–ï–õ–ò: {case_id.upper()}")
    print("=" * 80)
    
    tester = DialogueTester(case_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
    print(f"\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–µ–π—Å–∞:")
    print(f"   Case ID: {tester.case_id}")
    print(f"   Dialogue Model: {tester.dialogue_model}")
    print(f"   Reviewer Model: {tester.reviewer_model}")
    print(f"   Max Turns: {tester.config.MAX_DIALOGUE_TURNS}")
    print(f"   –õ–æ–≥-—Ñ–∞–π–ª: {tester.log_file}")
    
    print(f"\nüìù –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–µ–π—Å–∞:")
    print(tester.config.get_start_message())
    
    print("\n" + "-" * 80)
    print("üí¨ –ù–ê–ß–ê–õ–û –î–ò–ê–õ–û–ì–ê")
    print("-" * 80)
    print("\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–ø–ª–∏–∫—É (–∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: 'review' - –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑, 'quit' - –≤—ã—Ö–æ–¥):\n")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_input = input(f"–•–æ–¥ {tester.turn_count + 1}> ").strip()
            
            if not user_input:
                continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if user_input.lower() in ['quit', 'exit', 'q']:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
                break
            
            if user_input.lower() in ['review', 'r']:
                print("\nüîç –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞...")
                result = await tester.request_review()
                
                if result["success"]:
                    parsed_review = result["parsed_review"]
                    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–¶–ï–ù–ó–ï–ù–¢–ê:")
                    print(f"\n{parsed_review.get('overall', 'N/A')}")
                    
                    good_points = parsed_review.get("goodPoints", [])
                    if good_points:
                        print(f"\n‚úÖ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ:")
                        for i, point in enumerate(good_points, 1):
                            print(f"   {i}. {point}")
                    
                    improvement_points = parsed_review.get("improvementPoints", [])
                    if improvement_points:
                        print(f"\nüí° –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:")
                        for i, point in enumerate(improvement_points, 1):
                            print(f"   {i}. {point}")
                else:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
                print("\n" + "-" * 80)
                continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = await tester.send_user_message(user_input)
            
            if not result["success"]:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                continue
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
            parsed = result["parsed_response"]
            reply_text = parsed.get("ReplyText", "")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if case_id == "career_dialog":
                character_name = "–ú–∞–∫—Å–∏–º"
            elif case_id == "fb_employee":
                character_name = "–ï–≤–≥–µ–Ω–∏–π"
            else:
                character_name = "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä"
            
            print(f"\n{character_name}: {reply_text}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ (–µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω True)
            if case_id == "career_dialog":
                components = ["Aspirations", "Strengths", "Development", "Opportunities", "Plan"]
            else:
                components = ["Behavior", "Result", "Emotion", "Question", "Agreement"]
            
            detected = [k for k in components if parsed.get(k, False)]
            if detected:
                print(f"   [–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {', '.join(detected)}]")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            print(f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(result['components_achieved'])}/5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, —Ö–æ–¥ {result['turn']}/{tester.config.MAX_DIALOGUE_TURNS}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if result["all_components_achieved"]:
                print("\n‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã!")
                
                auto_review = input("\nüîç –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ").strip().lower()
                if auto_review == 'y':
                    result = await tester.request_review()
                    if result["success"]:
                        parsed_review = result["parsed_review"]
                        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–¶–ï–ù–ó–ï–ù–¢–ê:")
                        print(f"\n{parsed_review.get('overall', 'N/A')}")
                        
                        good_points = parsed_review.get("goodPoints", [])
                        if good_points:
                            print(f"\n‚úÖ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ:")
                            for i, point in enumerate(good_points, 1):
                                print(f"   {i}. {point}")
                        
                        improvement_points = parsed_review.get("improvementPoints", [])
                        if improvement_points:
                            print(f"\nüí° –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:")
                            for i, point in enumerate(improvement_points, 1):
                                print(f"   {i}. {point}")
                break
            
            if result["max_turns_reached"]:
                print(f"\n‚è±Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ö–æ–¥–æ–≤ ({tester.config.MAX_DIALOGUE_TURNS})")
                
                auto_review = input("\nüîç –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ").strip().lower()
                if auto_review == 'y':
                    result = await tester.request_review()
                    if result["success"]:
                        parsed_review = result["parsed_review"]
                        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–¶–ï–ù–ó–ï–ù–¢–ê:")
                        print(f"\n{parsed_review.get('overall', 'N/A')}")
                        
                        good_points = parsed_review.get("goodPoints", [])
                        if good_points:
                            print(f"\n‚úÖ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ:")
                            for i, point in enumerate(good_points, 1):
                                print(f"   {i}. {point}")
                        
                        improvement_points = parsed_review.get("improvementPoints", [])
                        if improvement_points:
                            print(f"\nüí° –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:")
                            for i, point in enumerate(improvement_points, 1):
                                print(f"   {i}. {point}")
                break
            
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.exception("–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
            break
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\n" + "=" * 80)
    tester.print_summary()
    print("\n‚úÖ –í—Å–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: " + str(tester.log_file))


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ò–ê–õ–û–ì–û–í–´–• –ú–û–î–ï–õ–ï–ô")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    print("\n‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    try:
        initialize_ai_providers()
        ai_gateway = get_ai_gateway()
        available = ai_gateway.get_available_providers()
        
        if not available:
            print("‚ùå AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (OPENAI_API_KEY –≤ .env)")
            return
        
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {[p.value for p in available]}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        return
    
    # –í—ã–±–æ—Ä –∫–µ–π—Å–∞
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã:")
    print("   1. career_dialog - –ö–∞—Ä—å–µ—Ä–Ω—ã–π –¥–∏–∞–ª–æ–≥")
    print("   2. fb_employee - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–ü–†–û–í–î)")
    print("   3. fb_peer - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∫–æ–ª–ª–µ–≥–µ (–ü–†–û–í–î)")
    
    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å (1-3) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
        
        if choice.lower() in ['q', 'quit', 'exit']:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return
        
        case_map = {
            "1": "career_dialog",
            "2": "fb_employee",
            "3": "fb_peer"
        }
        
        if choice in case_map:
            case_id = case_map[choice]
            await interactive_test(case_id)
            
            # –°–ø—Ä–æ—Å–∏—Ç—å, —Ö–æ—Ç–∏–º –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            again = input("\nüîÑ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–µ–π—Å? (y/n): ").strip().lower()
            if again != 'y':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")

