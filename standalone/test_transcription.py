#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_transcription.py
    
–ü—Ä–∏–º–µ—Ä—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
    python test_transcription.py --file "–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.ogg"
    python test_transcription.py --model "gpt-4o-transcribe"
    python test_transcription.py --language "en" --temperature 0.2
    python test_transcription.py --prompt "–†–∞–∑–≥–æ–≤–æ—Ä –æ —Ä–∞–±–æ—Ç–µ, —Ç–µ—Ö–Ω–∏–∫–∞, —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä"
    
–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    --file/-f       –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
    --model/-m      –ú–æ–¥–µ–ª—å (whisper-1, gpt-4o-transcribe)
    --language/-l   –Ø–∑—ã–∫ (ru, en, –∏ –¥—Ä. –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO-639-1)
    --prompt/-p     –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ (–¥–æ 224 —Ç–æ–∫–µ–Ω–æ–≤)
    --temperature/-t –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 0.0-1.0 (0.0=–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ, 1.0=–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ)
"""

import asyncio
import argparse
import logging
import sys
from pathlib import Path
from io import BytesIO

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from openai import OpenAI
from app.config.settings import Settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_AUDIO_FILE = r"C:\Users\–ê–ª–µ–∫—Å–∞–Ω–¥—Ä\Downloads\audio_2025-10-27_12-57-31.ogg"

# –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∫–∞–∫ –≤ –±–æ—Ç–µ)
DEFAULT_MODEL = "gpt-4o-transcribe"


async def transcribe_audio_file(
    file_path: str, 
    model: str = DEFAULT_MODEL,
    language: str = "ru",
    prompt: str = None,
    temperature: float = 0.9
) -> str:
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª —á–µ—Ä–µ–∑ OpenAI API.
    
    Args:
        file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
        model: –ú–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        language: –Ø–∑—ã–∫ –∞—É–¥–∏–æ (ISO-639-1, –Ω–∞–ø—Ä–∏–º–µ—Ä "ru")
        prompt: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ (–¥–æ 224 —Ç–æ–∫–µ–Ω–æ–≤)
        temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ (0.0-1.0, –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å)
        
    Returns:
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not Path(file_path).exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
        with open(file_path, "rb") as f:
            audio_data = f.read()
            
        logger.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path} ({len(audio_data)} –±–∞–π—Ç)")
        
        # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç
        bytes_io = BytesIO(audio_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = Settings()
        if not settings.OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
        client = OpenAI(api_key=settings.OPENAI_API_KEY)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é (–º–æ–¥–µ–ª—å: {model})...")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ executor
        def _sync_transcribe():
            bytes_io.seek(0)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è MIME-type
            file_ext = Path(file_path).suffix.lower()
            mime_types = {
                '.ogg': 'audio/ogg',
                '.mp3': 'audio/mpeg',
                '.wav': 'audio/wav',
                '.m4a': 'audio/m4a',
                '.mp4': 'audio/mp4',
                '.webm': 'audio/webm'
            }
            mime_type = mime_types.get(file_ext, 'audio/ogg')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º tuple –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–∞
            file_tuple = (f"audio{file_ext}", bytes_io, mime_type)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                "model": model,
                "file": file_tuple,
                "response_format": "text",
                "language": language,
                "temperature": temperature
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º prompt –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if prompt:
                params["prompt"] = prompt
                
            result = client.audio.transcriptions.create(**params)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(result, str):
                return result
            else:
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–∫—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                text = getattr(result, "text", None)
                if not text and isinstance(result, dict):
                    text = result.get("text")
                return text or ""
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ executor –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
        loop = asyncio.get_event_loop()
        transcribed_text = await loop.run_in_executor(None, _sync_transcribe)
        
        logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return transcribed_text.strip()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e} ({type(e).__name__})")
        return ""


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(
        description="–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ"
    )
    parser.add_argument(
        "--file", "-f",
        default=DEFAULT_AUDIO_FILE,
        help=f"–ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_AUDIO_FILE})"
    )
    parser.add_argument(
        "--model", "-m",
        default=DEFAULT_MODEL,
        help=f"–ú–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MODEL})"
    )
    parser.add_argument(
        "--language", "-l",
        default="ru",
        help="–Ø–∑—ã–∫ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO-639-1 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ru)"
    )
    parser.add_argument(
        "--prompt", "-p",
        default=None,
        help="–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ (–¥–æ 224 —Ç–æ–∫–µ–Ω–æ–≤)"
    )
    parser.add_argument(
        "--temperature", "-t",
        type=float,
        default=0.0,
        help="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ 0.0-1.0 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0)"
    )
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("üé§ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–ò –ê–£–î–ò–û")
    print("=" * 60)
    print(f"–§–∞–π–ª: {args.file}")
    print(f"–ú–æ–¥–µ–ª—å: {args.model}")
    print(f"–Ø–∑—ã–∫: {args.language}")
    print(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {args.temperature}")
    if args.prompt:
        print(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {args.prompt}")
    print("-" * 60)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
    result = await transcribe_audio_file(
        args.file, 
        args.model, 
        args.language, 
        args.prompt, 
        args.temperature
    )
    
    print("\nüìù –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–ò:")
    print("-" * 60)
    if result:
        print(f'"{result}"')
        print(f"\n–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    print("=" * 60)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
