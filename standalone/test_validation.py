#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –∏ –Ω–µ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ LLM —Å–µ—Ä–≤–∏—Å–∞–º.
"""

import asyncio
import sys
import os
from pathlib import Path
from io import BytesIO
from unittest.mock import Mock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ú–æ–∫–∞–µ–º aiogram –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Telegram API
class MockMessage:
    def __init__(self, text=None, voice=None, from_user_id=12345):
        self.text = text
        self.voice = voice
        self.from_user = Mock()
        self.from_user.id = from_user_id

class MockVoice:
    def __init__(self, file_size, duration):
        self.file_size = file_size
        self.duration = duration
        self.file_id = "mock_file_id"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –º–æ–∫–∏–Ω–≥–∞
from app.services.validation_service import InputValidator, ValidationError
from app.config.settings import Settings

class ValidationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.validator = InputValidator()
        self.settings = Settings()
        self.test_results = []
    
    def log_test(self, test_name: str, passed: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        self.test_results.append((test_name, passed))
        print(f"{status} {test_name}")
        if details:
            print(f"    {details}")
    
    def test_text_validation_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
        print("\nüî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        
        # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        try:
            result = self.validator.validate_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            self.log_test("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", True, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
        except Exception as e:
            self.log_test("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", False, str(e))
        
        # –¢–µ—Å—Ç 2: –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        try:
            self.validator.validate_text("")
            self.log_test("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            self.log_test("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message}")
        
        # –¢–µ—Å—Ç 3: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        long_text = "–ê" * (self.settings.TEXT_MAX_LENGTH + 1)
        try:
            self.validator.validate_text(long_text)
            self.log_test("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            self.log_test("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message}")
        
        # –¢–µ—Å—Ç 4: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫
        many_lines = "\n".join(["—Å—Ç—Ä–æ–∫–∞"] * (self.settings.TEXT_MAX_LINES + 1))
        try:
            self.validator.validate_text(many_lines)
            self.log_test("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫", False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            self.log_test("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫", True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message}")
        
        # –¢–µ—Å—Ç 5: –°–ø–∞–º (–º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤)
        spam_text = "–∞" * 60  # –±–æ–ª—å—à–µ 50 –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
        try:
            self.validator.validate_text(spam_text)
            self.log_test("–°–ø–∞–º-—Ç–µ–∫—Å—Ç", False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            self.log_test("–°–ø–∞–º-—Ç–µ–∫—Å—Ç", True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message}")
    
    def test_voice_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
        
        # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
        try:
            self.validator.validate_voice_file(1024 * 1024, 30.0)  # 1MB, 30 —Å–µ–∫
            self.log_test("–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª", True)
        except Exception as e:
            self.log_test("–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª", False, str(e))
        
        # –¢–µ—Å—Ç 2: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
        try:
            big_size = int(self.settings.VOICE_MAX_SIZE_MB * 1024 * 1024 * 1.1)  # –Ω–∞ 10% –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
            self.validator.validate_voice_file(big_size, 30.0)
            self.log_test("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª", False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            self.log_test("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª", True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message}")
        
        # –¢–µ—Å—Ç 3: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ
        try:
            self.validator.validate_voice_file(1024, self.settings.VOICE_MAX_DURATION_SEC + 10)
            self.log_test("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ", False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            self.log_test("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ", True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message}")
        
        # –¢–µ—Å—Ç 4: –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∞—É–¥–∏–æ
        try:
            self.validator.validate_voice_file(1024, 0.1)  # 0.1 —Å–µ–∫
            self.log_test("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∞—É–¥–∏–æ", False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            self.log_test("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∞—É–¥–∏–æ", True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e.message}")
    
    def test_transcription_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:")
        
        # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        try:
            result = self.validator.validate_transcribed_text("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
            self.log_test("–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", True, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
        except Exception as e:
            self.log_test("–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", False, str(e))
        
        # –¢–µ—Å—Ç 2: –ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        try:
            self.validator.validate_transcribed_text("")
            self.log_test("–ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            self.log_test("–ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {e.message}")
        
        # –¢–µ—Å—Ç 3: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ (–Ω–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è –∫–∞–∫ —Å–ø–∞–º)
        weird_transcription = "—ç—ç—ç... –º–º–º... –Ω—É... —Ç–∏–ø–∞ —Ç–æ–≥–æ..."
        try:
            result = self.validator.validate_transcribed_text(weird_transcription)
            self.log_test("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞")
        except Exception as e:
            self.log_test("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏", False, str(e))
    
    async def test_message_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:")
        
        # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            mock_msg = MockMessage(text="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            result = await self.validator.validate_and_process_text(mock_msg)
            self.log_test("–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", True, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
        except Exception as e:
            self.log_test("–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", False, str(e))
        
        # –¢–µ—Å—Ç 2: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        try:
            mock_msg = MockMessage(text=None)
            await self.validator.validate_and_process_text(mock_msg)
            self.log_test("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞", False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            self.log_test("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞", True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {e.message}")
        
        # –¢–µ—Å—Ç 3: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            mock_voice = MockVoice(1024 * 1024, 30.0)  # 1MB, 30 —Å–µ–∫
            mock_msg = MockMessage(voice=mock_voice)
            await self.validator.validate_and_process_voice(mock_msg)
            self.log_test("–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ", True)
        except Exception as e:
            self.log_test("–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ", False, str(e))
        
        # –¢–µ—Å—Ç 4: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≥–æ–ª–æ—Å–∞
        try:
            mock_msg = MockMessage(voice=None)
            await self.validator.validate_and_process_voice(mock_msg)
            self.log_test("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≥–æ–ª–æ—Å–∞", False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            self.log_test("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≥–æ–ª–æ—Å–∞", True, f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {e.message}")
    
    def test_rate_limiting(self):
        """–¢–µ—Å—Ç rate limiting (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, –Ω–µ –∏—Å—Ç–æ—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã)"""
        print("\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting:")
        
        user_id = 99999  # —Ç–µ—Å—Ç–æ–≤—ã–π ID
        
        # –¢–µ—Å—Ç: –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        rate_limited = False
        try:
            for i in range(self.settings.MAX_REQUESTS_PER_MINUTE + 1):
                self.validator._check_rate_limit(user_id)
        except ValidationError as e:
            rate_limited = True
            self.log_test("Rate limiting", True, f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ {i+1} –∑–∞–ø—Ä–æ—Å–æ–≤: {e.message}")
        
        if not rate_limited:
            self.log_test("Rate limiting", False, "Rate limit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
    
    def test_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–º–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        config_ok = True
        config_details = []
        
        if self.settings.TEXT_MAX_LENGTH <= 0:
            config_ok = False
            config_details.append("TEXT_MAX_LENGTH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")
        else:
            config_details.append(f"TEXT_MAX_LENGTH = {self.settings.TEXT_MAX_LENGTH}")
        
        if self.settings.VOICE_MAX_SIZE_MB <= 0:
            config_ok = False
            config_details.append("VOICE_MAX_SIZE_MB –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")
        else:
            config_details.append(f"VOICE_MAX_SIZE_MB = {self.settings.VOICE_MAX_SIZE_MB}")
        
        if self.settings.MAX_REQUESTS_PER_MINUTE <= 0:
            config_ok = False
            config_details.append("MAX_REQUESTS_PER_MINUTE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")
        else:
            config_details.append(f"MAX_REQUESTS_PER_MINUTE = {self.settings.MAX_REQUESTS_PER_MINUTE}")
        
        self.log_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", config_ok, "; ".join(config_details))
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        total_tests = len(self.test_results)
        passed_tests = sum(1 for _, passed in self.test_results if passed)
        failed_tests = total_tests - passed_tests
        
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –ü—Ä–æ—à–ª–æ: {passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: {failed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests*100):.1f}%")
        
        if failed_tests == 0:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {failed_tests} –ø—Ä–æ–±–ª–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.")
        
        return failed_tests == 0

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    print("=" * 60)
    print("üí° –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏")
    print("üí° –ù–∏–∫–∞–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º –ù–ï –¥–µ–ª–∞–µ—Ç—Å—è")
    print("üí° –í–∞—à–∏ –ª–∏–º–∏—Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
    print("=" * 60)
    
    tester = ValidationTester()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        tester.test_configuration()
        tester.test_text_validation_basic()
        tester.test_voice_validation()
        tester.test_transcription_validation()
        await tester.test_message_validation()
        tester.test_rate_limiting()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        success = tester.print_summary()
        
        return 0 if success else 1
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 2

if __name__ == "__main__":
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏
    os.environ.pop("OPENAI_API_KEY", None)
    os.environ.pop("BOT_TOKEN", None)
    
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
